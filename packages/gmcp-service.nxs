{
    "type": "group",
    "items": [
        {
            "type": "function",
            "items": [],
            "actions": [],
            "name": "onGMCP",
            "enabled": true,
            "id": 3,
            "code": "(function (args) {\n    client.gmcpservice.latest[args.gmcp_method] = args.gmcp_args;\n    // Vitals\n    if (args.gmcp_method === 'Char.Vitals') {\n        client.gmcpservice.previousVitals = deepCopy(client.gmcpservice.vitals);\n        client.gmcpservice.vitals = args.gmcp_args;\n    }\n    // Room\n    if (args.gmcp_method === 'Room.Info') {\n        client.gmcpservice.previousRoom = deepCopy(client.gmcpservice.room);\n        client.gmcpservice.room = args.gmcp_args;\n    }\n    // Items\n    if (args.gmcp_method === 'Char.Items.List'\n        || args.gmcp_method === 'Char.Items.Add'\n        || args.gmcp_method === 'Char.Items.Remove'\n        || args.gmcp_method === 'Char.Items.Update') {\n        client.gmcpservice.previousItems = deepCopy(Object.assign({}, client.gmcpservice.items));\n        client.gmcpservice.items[args.gmcp_args.location] = client.gmcpservice.items[args.gmcp_args.location] || [];\n        const items = client.gmcpservice.items[args.gmcp_args.location];\n        if (args.gmcp_method === 'Char.Items.List') {\n            client.gmcpservice.items[args.gmcp_args.location] = args.gmcp_args.items;\n        }\n        else if (args.gmcp_method === 'Char.Items.Add') {\n            items.push(args.gmcp_args.item);\n        }\n        else if (args.gmcp_method === 'Char.Items.Remove') {\n            const index = items.findIndex(value => value.id === args.gmcp_args.item.id);\n            if (index !== -1) {\n                items.splice(index, 1);\n            }\n        }\n        else {\n            const index = items.findIndex(value => value.id === args.gmcp_args.item.id);\n            if (index !== -1) {\n                items.splice(index, 1, args.gmcp_args.item);\n            }\n        }\n    }\n    // Defences\n    if (args.gmcp_method === 'Char.Defences.List'\n        || args.gmcp_method === 'Char.Defences.Add'\n        || args.gmcp_method === 'Char.Defences.Remove') {\n        client.gmcpservice.previousDefences = deepCopy(client.gmcpservice.defences);\n        if (args.gmcp_method === 'Char.Defences.List') {\n            client.gmcpservice.defences = args.gmcp_args;\n        }\n        else if (args.gmcp_method === 'Char.Defences.Add') {\n            client.gmcpservice.defences.push(args.gmcp_args);\n        }\n        else {\n            args.gmcp_args.forEach(defence => {\n                const index = client.gmcpservice.defences.findIndex(value => value.name === defence);\n                if (index !== -1) {\n                    client.gmcpservice.defences.splice(index, 1);\n                }\n            });\n        }\n    }\n    // Afflictions\n    if (args.gmcp_method === 'Char.Afflictions.List'\n        || args.gmcp_method === 'Char.Afflictions.Add'\n        || args.gmcp_method === 'Char.Afflictions.Remove') {\n        client.gmcpservice.previousAfflictions = deepCopy(client.gmcpservice.afflictions);\n        if (args.gmcp_method === 'Char.Afflictions.List') {\n            client.gmcpservice.afflictions = args.gmcp_args;\n        }\n        else if (args.gmcp_method === 'Char.Afflictions.Add') {\n            client.gmcpservice.afflictions.push(args.gmcp_args);\n        }\n        else {\n            args.gmcp_args.forEach(affliction => {\n                const index = client.gmcpservice.afflictions.findIndex(value => value.name === affliction);\n                if (index !== -1) {\n                    client.gmcpservice.afflictions.splice(index, 1);\n                }\n            });\n        }\n    }\n    // Rift\n    if (args.gmcp_method === 'IRE.Rift.List' || args.gmcp_method === 'IRE.Rift.Change') {\n        client.gmcpservice.previousRift = deepCopy(client.gmcpservice.rift);\n        if (args.gmcp_method === 'IRE.Rift.List') {\n            client.gmcpservice.rift = {};\n            args.gmcp_args.forEach(value => {\n                const id = getRiftItemId(value);\n                client.gmcpservice.rift[id] = Object.assign({ id }, value);\n            });\n        }\n        else {\n            const id = getRiftItemId(args.gmcp_args);\n            client.gmcpservice.rift[id] = Object.assign({ id }, args.gmcp_args);\n        }\n        function getRiftItemId(item) {\n            switch (item.name) {\n                case 'moss':\n                    return 'irid';\n                case 'lumic moss':\n                    return 'lumic';\n                case 'gold':\n                    return 'agold';\n                default:\n                    return item.name.replace(/\\s+/, '');\n            }\n        }\n    }\n    // setTimeout(() => {\n    client.gmcpservice.subscriptions.forEach(subscription => {\n        subscription.methods.forEach(method => {\n            if (args.gmcp_method.includes(method)) {\n                subscription.subscriber(args);\n            }\n        });\n    });\n    // });\n    function deepCopy(object) {\n        return JSON.parse(JSON.stringify(object));\n    }\n})(args);"
        },
        {
            "type": "function",
            "items": [],
            "actions": [],
            "name": "onLoad",
            "enabled": true,
            "id": 2,
            "code": "(function () {\n    client.gmcpservice = {\n        latest: {},\n        subscriptions: [],\n        vitals: {},\n        previousVitals: {},\n        room: {},\n        previousRoom: {},\n        items: {\n            inv: [],\n            room: []\n        },\n        previousItems: {\n            inv: [],\n            room: []\n        },\n        defences: [],\n        previousDefences: [],\n        afflictions: [],\n        previousAfflictions: [],\n        rift: {},\n        previousRift: {},\n        subscribe(methods, subscriber) {\n            const subscription = {\n                methods,\n                subscriber\n            };\n            client.gmcpservice.subscriptions.push(subscription);\n            return subscription;\n        },\n        unsubscribe(subscription) {\n            const index = client.gmcpservice.subscriptions.findIndex(value => value === subscription);\n            client.gmcpservice.subscriptions.splice(index, 1);\n        },\n        once(methods, subscriber) {\n            const subscription = client.gmcpservice.subscribe(methods, function (args) {\n                subscriber(args);\n                client.gmcpservice.unsubscribe(subscription);\n            });\n            return subscription;\n        },\n        echo(text) {\n            client.displayservice.echo(`%lightgray%[%deepskyblue%GMCP Service%end%]:%end% ${text}`);\n        },\n        error(text) {\n            client.gmcpservice.echo(`%red%${text}`);\n        }\n    };\n    send_GMCP('Char.Items.Inv');\n    send_GMCP('Char.Items.Room');\n    send_GMCP('IRE.Rift.Request');\n    client.systemservice.sendCommand('quicklook');\n    client.gmcpservice.echo('Loaded.');\n})(args);"
        }
    ],
    "actions": [],
    "name": "GMCP Service",
    "enabled": true,
    "id": 1,
    "description": "A GMCP Service"
}