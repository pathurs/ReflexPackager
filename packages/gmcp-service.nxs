{
    "type": "group",
    "items": [
        {
            "type": "function",
            "items": [],
            "actions": [],
            "name": "onGMCP",
            "enabled": true,
            "id": 3,
            "code": "client.gmcpService.latest[args.gmcp_method] = args.gmcp_args;\r\n    // Vitals\r\n    if (args.gmcp_method === 'Char.Vitals') {\r\n        client.gmcpService.previousVitals = deepCopy(client.gmcpService.vitals);\r\n        client.gmcpService.vitals = args.gmcp_args;\r\n    }\r\n    // Status\r\n    if (args.gmcp_method === 'Char.Status') {\r\n        client.gmcpService.previousStatus = deepCopy(client.gmcpService.status);\r\n        client.gmcpService.status = args.gmcp_args;\r\n    }\r\n    // Room\r\n    if (args.gmcp_method === 'Room.Info') {\r\n        client.gmcpService.previousRoom = deepCopy(client.gmcpService.room);\r\n        client.gmcpService.room = args.gmcp_args;\r\n    }\r\n    // Items\r\n    if (args.gmcp_method === 'Char.Items.List'\r\n        || args.gmcp_method === 'Char.Items.Add'\r\n        || args.gmcp_method === 'Char.Items.Remove'\r\n        || args.gmcp_method === 'Char.Items.Update') {\r\n        client.gmcpService.previousItems = deepCopy(Object.assign({}, client.gmcpService.items));\r\n        client.gmcpService.items[args.gmcp_args.location] = client.gmcpService.items[args.gmcp_args.location] || [];\r\n        const items = client.gmcpService.items[args.gmcp_args.location];\r\n        if (args.gmcp_method === 'Char.Items.List') {\r\n            client.gmcpService.items[args.gmcp_args.location] = args.gmcp_args.items;\r\n        }\r\n        else if (args.gmcp_method === 'Char.Items.Add') {\r\n            items.push(args.gmcp_args.item);\r\n        }\r\n        else if (args.gmcp_method === 'Char.Items.Remove') {\r\n            const index = items.findIndex(value => value.id === args.gmcp_args.item.id);\r\n            if (index !== -1) {\r\n                items.splice(index, 1);\r\n            }\r\n        }\r\n        else {\r\n            const index = items.findIndex(value => value.id === args.gmcp_args.item.id);\r\n            if (index !== -1) {\r\n                items.splice(index, 1, args.gmcp_args.item);\r\n            }\r\n        }\r\n    }\r\n    // Defences\r\n    if (args.gmcp_method === 'Char.Defences.List'\r\n        || args.gmcp_method === 'Char.Defences.Add'\r\n        || args.gmcp_method === 'Char.Defences.Remove') {\r\n        client.gmcpService.previousDefences = deepCopy(client.gmcpService.defences);\r\n        if (args.gmcp_method === 'Char.Defences.List') {\r\n            client.gmcpService.defences = args.gmcp_args;\r\n        }\r\n        else if (args.gmcp_method === 'Char.Defences.Add') {\r\n            client.gmcpService.defences.push(args.gmcp_args);\r\n        }\r\n        else {\r\n            args.gmcp_args.forEach(defence => {\r\n                const index = client.gmcpService.defences.findIndex(value => value.name === defence);\r\n                if (index !== -1) {\r\n                    client.gmcpService.defences.splice(index, 1);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    // Afflictions\r\n    if (args.gmcp_method === 'Char.Afflictions.List'\r\n        || args.gmcp_method === 'Char.Afflictions.Add'\r\n        || args.gmcp_method === 'Char.Afflictions.Remove') {\r\n        client.gmcpService.previousAfflictions = deepCopy(client.gmcpService.afflictions);\r\n        if (args.gmcp_method === 'Char.Afflictions.List') {\r\n            client.gmcpService.afflictions = args.gmcp_args;\r\n        }\r\n        else if (args.gmcp_method === 'Char.Afflictions.Add') {\r\n            client.gmcpService.afflictions.push(args.gmcp_args);\r\n        }\r\n        else {\r\n            args.gmcp_args.forEach(affliction => {\r\n                const index = client.gmcpService.afflictions.findIndex(value => value.name === affliction);\r\n                if (index !== -1) {\r\n                    client.gmcpService.afflictions.splice(index, 1);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    // Rift\r\n    if (args.gmcp_method === 'IRE.Rift.List' || args.gmcp_method === 'IRE.Rift.Change') {\r\n        client.gmcpService.previousRift = deepCopy(client.gmcpService.rift);\r\n        if (args.gmcp_method === 'IRE.Rift.List') {\r\n            client.gmcpService.rift = {};\r\n            args.gmcp_args.forEach(value => {\r\n                const id = getRiftItemId(value);\r\n                client.gmcpService.rift[id] = Object.assign({ id }, value);\r\n            });\r\n        }\r\n        else {\r\n            const id = getRiftItemId(args.gmcp_args);\r\n            client.gmcpService.rift[id] = Object.assign({ id }, args.gmcp_args);\r\n        }\r\n        function getRiftItemId(item) {\r\n            switch (item.name) {\r\n                case 'moss':\r\n                    return 'irid';\r\n                case 'lumic moss':\r\n                    return 'lumic';\r\n                case 'gold':\r\n                    return 'agold';\r\n                default:\r\n                    return item.name.replace(/\\s+/, '');\r\n            }\r\n        }\r\n    }\r\n    // setTimeout(() => {\r\n    client.gmcpService.subscriptions.forEach(subscription => {\r\n        subscription.methods.forEach(method => {\r\n            if (args.gmcp_method.includes(method)) {\r\n                subscription.subscriber(args);\r\n            }\r\n        });\r\n    });\r\n    // });\r\n    function deepCopy(object) {\r\n        return JSON.parse(JSON.stringify(object));\r\n    }\r\n"
        },
        {
            "type": "function",
            "items": [],
            "actions": [],
            "name": "onLoad",
            "enabled": true,
            "id": 2,
            "code": "class _GMCPService extends client.systemService.BasePackage {\r\n        constructor() {\r\n            super('GMCP Service', 'gmcp-service:settings', {});\r\n            this.latest = {};\r\n            this.subscriptions = [];\r\n            this.vitals = {};\r\n            this.previousVitals = {};\r\n            this.status = {};\r\n            this.previousStatus = {};\r\n            this.room = {};\r\n            this.previousRoom = {};\r\n            this.items = {\r\n                inv: [],\r\n                room: []\r\n            };\r\n            this.previousItems = {\r\n                inv: [],\r\n                room: []\r\n            };\r\n            this.defences = [];\r\n            this.previousDefences = [];\r\n            this.afflictions = [];\r\n            this.previousAfflictions = [];\r\n            this.rift = {};\r\n            this.previousRift = {};\r\n            send_GMCP('Char.Items.Inv');\r\n            send_GMCP('Char.Items.Room');\r\n            send_GMCP('IRE.Rift.Request');\r\n            this.systemService.sendCommand('quicklook');\r\n            this.systemService.sendCommand('score');\r\n            this.echo('Loaded.');\r\n        }\r\n        subscribe(methods, subscriber) {\r\n            const subscription = {\r\n                methods,\r\n                subscriber\r\n            };\r\n            client.gmcpService.subscriptions.push(subscription);\r\n            return subscription;\r\n        }\r\n        unsubscribe(subscription) {\r\n            const index = client.gmcpService.subscriptions.findIndex(value => value === subscription);\r\n            client.gmcpService.subscriptions.splice(index, 1);\r\n        }\r\n        once(methods, subscriber) {\r\n            const subscription = client.gmcpService.subscribe(methods, function (args) {\r\n                subscriber(args);\r\n                client.gmcpService.unsubscribe(subscription);\r\n            });\r\n            return subscription;\r\n        }\r\n    }\r\n    ;\r\n    client.gmcpService = new _GMCPService();\r\n"
        }
    ],
    "actions": [],
    "name": "GMCP Service",
    "enabled": true,
    "id": 1,
    "description": "A GMCP Service"
}