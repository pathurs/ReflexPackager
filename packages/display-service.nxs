{
    "type": "group",
    "items": [
        {
            "type": "function",
            "items": [],
            "actions": [],
            "name": "onLoad",
            "enabled": true,
            "id": 2,
            "code": "client.displayService = {\r\n        echo(messageOrMessages) {\r\n            if (Array.isArray(messageOrMessages)) {\r\n                client.displayService.echo(messageOrMessages.map(message => `<div>${message}</div>`).join(''));\r\n            }\r\n            else {\r\n                ow_Write('#output_main', client.displayService.colorify(messageOrMessages));\r\n            }\r\n        },\r\n        box(message, borderCharacter = '%lightgray%*%end%') {\r\n            const colorifiedBorderCharacter = client.displayService.colorify(borderCharacter);\r\n            if (getLength(colorifiedBorderCharacter) !== 1) {\r\n                throw new Error(`'borderCharacter' must have a length of 1.`);\r\n            }\r\n            const lines = [];\r\n            const messageLength = getLength(message);\r\n            const boxWidth = Math.min(messageLength, 76);\r\n            lines.push(safeRepeat(colorifiedBorderCharacter, boxWidth + 4));\r\n            lines.push(`${colorifiedBorderCharacter}${safeRepeat(' ', boxWidth + 2)}${colorifiedBorderCharacter}`);\r\n            lines.push(`${colorifiedBorderCharacter}${center(message, boxWidth + 2, '', ' ')}${colorifiedBorderCharacter}`);\r\n            lines.push(`${colorifiedBorderCharacter}${safeRepeat(' ', boxWidth + 2)}${colorifiedBorderCharacter}`);\r\n            lines.push(safeRepeat(colorifiedBorderCharacter, boxWidth + 4));\r\n            client.displayService.echo(lines);\r\n        },\r\n        table(title, groups) {\r\n            const lines = [];\r\n            displayTableTitle(title);\r\n            groups.forEach(group => {\r\n                displayTableGroup(group);\r\n            });\r\n            displayTableFooter();\r\n            client.displayService.echo(lines);\r\n            function displayTableTitle(title) {\r\n                const left = 39 - Math.floor(getLength(title) / 2);\r\n                const right = 39 - Math.ceil(getLength(title) / 2);\r\n                lines.push(`+${safeRepeat('-', left)}${title}${safeRepeat('-', right)}+`);\r\n            }\r\n            function displayTableFooter() {\r\n                lines.push(`+${safeRepeat('-', 78)}+`);\r\n            }\r\n            function displayTableGroup(group) {\r\n                if (group.title) {\r\n                    displayTableGroupTitle(group.title);\r\n                }\r\n                for (let i = 0; i < group.items.length; i += group.columns) {\r\n                    displayTableGroupItems(group.items.slice(i, i + group.columns), group.columns);\r\n                }\r\n            }\r\n            function displayTableGroupTitle(title) {\r\n                const right = 76 - getLength(title);\r\n                lines.push(`+-${title}${safeRepeat('-', right)}-+`);\r\n            }\r\n            function displayTableGroupItems(items, columns) {\r\n                let columnWidth;\r\n                const columnSpacerWidth = 3;\r\n                switch (columns) {\r\n                    case 1:\r\n                        columnWidth = 74;\r\n                        break;\r\n                    case 2:\r\n                        columnWidth = 35;\r\n                        break;\r\n                    case 3:\r\n                        columnWidth = 22;\r\n                        break;\r\n                    case 4:\r\n                        columnWidth = 16;\r\n                        break;\r\n                    default:\r\n                        throw new Error(`Display Service: Unsupported columnss '${columns}'`);\r\n                }\r\n                let line = '';\r\n                for (let i = 0; i < items.length; i++) {\r\n                    const item = items[i];\r\n                    const parsed = `${item.label}${safeRepeat(' ', columnWidth - getLength(item.label) - getLength(item.value))}${item.value}`;\r\n                    if (i !== 0) {\r\n                        line += safeRepeat(' ', columnSpacerWidth);\r\n                    }\r\n                    line += parsed;\r\n                }\r\n                line += safeRepeat(' ', 74 - getLength(line));\r\n                lines.push(`|   ${line} |`);\r\n            }\r\n        },\r\n        color(text, color) {\r\n            return `<span style=\"color: ${color};\">${text}</span>`;\r\n        },\r\n        colorify(text) {\r\n            let result = text;\r\n            const pattern = /%([a-zA-Z]+|#[0-9a-fA-F]{6,6})%/;\r\n            let depth = 0;\r\n            let match;\r\n            while (match = pattern.exec(result)) {\r\n                let replacement = '';\r\n                if (match[1] == 'end') {\r\n                    //skip a end at depth 0\r\n                    if (depth > 0) {\r\n                        replacement = '</span>';\r\n                        depth--;\r\n                    }\r\n                }\r\n                else {\r\n                    replacement = `<span style=\"color: ${match[1]};\">`;\r\n                    depth++;\r\n                }\r\n                result = result.replace(pattern, replacement);\r\n            }\r\n            result += '</span>'.repeat(depth);\r\n            return result;\r\n        },\r\n        rainbowify(text) {\r\n            const rainbow = [\r\n                '#ff0000',\r\n                '#ff8800',\r\n                '#88ff00',\r\n                '#00ff00',\r\n                // '#00ff88',\r\n                '#0088ff',\r\n                // '#0000ff',\r\n                '#8800ff',\r\n                '#ff0088'\r\n            ];\r\n            let result = '';\r\n            for (let i = 0; i < text.length; i++) {\r\n                const colour = rainbow[i % rainbow.length];\r\n                const letter = text[i];\r\n                result += `%${colour}%${letter}%end%`;\r\n            }\r\n            return result;\r\n        },\r\n        commandify(text, command, hint) {\r\n            return client.displayService.clickify(text, `handle_aliases('${command}')`, hint);\r\n        },\r\n        clickify(text, code, hint) {\r\n            const anchorTag = $(`<a>${client.displayService.colorify(text)}</a>`);\r\n            anchorTag.attr('onclick', code + ';return false;');\r\n            anchorTag.attr('title', hint);\r\n            anchorTag.attr('style', 'cursor: pointer; text-decoration: underline;');\r\n            return anchorTag.prop('outerHTML');\r\n        }\r\n    };\r\n    function getLength(text) {\r\n        return $($.parseHTML(text)).text().length;\r\n    }\r\n    function safeRepeat(text, count) {\r\n        return text.repeat(Math.max(count, 0));\r\n    }\r\n    function center(text, width, gap = '', repeat = ' ') {\r\n        if (getLength(repeat) !== 1) {\r\n            throw new Error(`'repeat' must have a length of 1.`);\r\n        }\r\n        const textLength = getLength(text);\r\n        const gapLength = getLength(gap);\r\n        const left = Math.floor(width / 2) - Math.floor(textLength / 2) - gapLength;\r\n        const right = Math.ceil(width / 2) - Math.ceil(textLength / 2) - gapLength;\r\n        return `${safeRepeat(repeat, left)}${gap}${text}${gap}${safeRepeat(repeat, right)}`;\r\n    }\r\n    client.displayService.echo('%lightgray%[%deepskyblue%Display Service%end%]:%end% Loaded.');\r\n"
        }
    ],
    "actions": [],
    "name": "Display Service",
    "enabled": true,
    "id": 1,
    "description": "A Display Service"
}