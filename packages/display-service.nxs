{
    "type": "group",
    "items": [
        {
            "type": "function",
            "items": [],
            "actions": [],
            "name": "onLoad",
            "enabled": true,
            "id": 2,
            "code": "(function () {\n    client.displayService = {\n        echo(messageOrMessages) {\n            if (Array.isArray(messageOrMessages)) {\n                client.displayService.echo(messageOrMessages.map(message => `<div>${message}</div>`).join(''));\n            }\n            else {\n                ow_Write('#output_main', client.displayService.colorify(messageOrMessages));\n            }\n        },\n        box(message, borderCharacter = '%lightgray%*%end%') {\n            const colorifiedBorderCharacter = client.displayService.colorify(borderCharacter);\n            if (getLength(colorifiedBorderCharacter) !== 1) {\n                throw new Error(`'borderCharacter' must have a length of 1.`);\n            }\n            const lines = [];\n            const messageLength = getLength(message);\n            const boxWidth = Math.min(messageLength, 76);\n            lines.push(safeRepeat(colorifiedBorderCharacter, boxWidth + 4));\n            lines.push(`${colorifiedBorderCharacter}${safeRepeat(' ', boxWidth + 2)}${colorifiedBorderCharacter}`);\n            lines.push(`${colorifiedBorderCharacter}${center(message, boxWidth + 2, '', ' ')}${colorifiedBorderCharacter}`);\n            lines.push(`${colorifiedBorderCharacter}${safeRepeat(' ', boxWidth + 2)}${colorifiedBorderCharacter}`);\n            lines.push(safeRepeat(colorifiedBorderCharacter, boxWidth + 4));\n            client.displayService.echo(lines);\n        },\n        table(title, groups) {\n            const lines = [];\n            displayTableTitle(title);\n            groups.forEach(group => {\n                displayTableGroup(group);\n            });\n            displayTableFooter();\n            client.displayService.echo(lines);\n            function displayTableTitle(title) {\n                const left = 39 - Math.floor(getLength(title) / 2);\n                const right = 39 - Math.ceil(getLength(title) / 2);\n                lines.push(`+${safeRepeat('-', left)}${title}${safeRepeat('-', right)}+`);\n            }\n            function displayTableFooter() {\n                lines.push(`+${safeRepeat('-', 78)}+`);\n            }\n            function displayTableGroup(group) {\n                if (group.title) {\n                    displayTableGroupTitle(group.title);\n                }\n                for (let i = 0; i < group.items.length; i += group.columns) {\n                    displayTableGroupItems(group.items.slice(i, i + group.columns), group.columns);\n                }\n            }\n            function displayTableGroupTitle(title) {\n                const right = 76 - getLength(title);\n                lines.push(`+-${title}${safeRepeat('-', right)}-+`);\n            }\n            function displayTableGroupItems(items, columns) {\n                let columnWidth;\n                const columnSpacerWidth = 3;\n                switch (columns) {\n                    case 1:\n                        columnWidth = 74;\n                        break;\n                    case 2:\n                        columnWidth = 35;\n                        break;\n                    case 3:\n                        columnWidth = 22;\n                        break;\n                    case 4:\n                        columnWidth = 16;\n                        break;\n                    default:\n                        throw new Error(`Display Service: Unsupported columnss '${columns}'`);\n                }\n                let line = '';\n                for (let i = 0; i < items.length; i++) {\n                    const item = items[i];\n                    const parsed = `${item.label}${safeRepeat(' ', columnWidth - getLength(item.label) - getLength(item.value))}${item.value}`;\n                    if (i !== 0) {\n                        line += safeRepeat(' ', columnSpacerWidth);\n                    }\n                    line += parsed;\n                }\n                line += safeRepeat(' ', 74 - getLength(line));\n                lines.push(`|   ${line} |`);\n            }\n        },\n        color(text, color) {\n            return `<span style=\"color: ${color};\">${text}</span>`;\n        },\n        colorify(text) {\n            let result = text;\n            const pattern = /%([a-zA-Z]+|#[0-9a-fA-F]{6,6})%/;\n            let depth = 0;\n            let match;\n            while (match = pattern.exec(result)) {\n                let replacement = '';\n                if (match[1] == 'end') {\n                    //skip a end at depth 0\n                    if (depth > 0) {\n                        replacement = '</span>';\n                        depth--;\n                    }\n                }\n                else {\n                    replacement = `<span style=\"color: ${match[1]};\">`;\n                    depth++;\n                }\n                result = result.replace(pattern, replacement);\n            }\n            result += '</span>'.repeat(depth);\n            return result;\n        },\n        commandify(text, command, hint) {\n            return client.displayService.clickify(text, `handle_aliases('${command}')`, hint);\n        },\n        clickify(text, code, hint) {\n            const anchorTag = $(`<a>${client.displayService.colorify(text)}</a>`);\n            anchorTag.attr('onclick', code + ';return false;');\n            anchorTag.attr('title', hint);\n            anchorTag.attr('style', 'cursor: pointer; text-decoration: underline;');\n            return anchorTag.prop('outerHTML');\n        }\n    };\n    function getLength(text) {\n        return $($.parseHTML(text)).text().length;\n    }\n    function safeRepeat(text, count) {\n        return text.repeat(Math.max(count, 0));\n    }\n    function center(text, width, gap = '', repeat = ' ') {\n        if (getLength(repeat) !== 1) {\n            throw new Error(`'repeat' must have a length of 1.`);\n        }\n        const textLength = getLength(text);\n        const gapLength = getLength(gap);\n        const left = Math.floor(width / 2) - Math.floor(textLength / 2) - gapLength;\n        const right = Math.ceil(width / 2) - Math.ceil(textLength / 2) - gapLength;\n        return `${safeRepeat(repeat, left)}${gap}${text}${gap}${safeRepeat(repeat, right)}`;\n    }\n    client.displayService.echo('%lightgray%[%deepskyblue%Display Service%end%]:%end% Loaded.');\n})(args);"
        }
    ],
    "actions": [],
    "name": "Display Service",
    "enabled": true,
    "id": 1,
    "description": "A Display Service"
}