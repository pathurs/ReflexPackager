{
    "type": "group",
    "items": [
        {
            "type": "function",
            "items": [],
            "actions": [],
            "name": "onLoad",
            "enabled": true,
            "id": 2,
            "code": "(function () {\n    client.inventoryManager = {\n        settings: client.systemService.defaultsDeep(get_variable('inventory-manager:settings'), {\n            enabled: true,\n            wielding: {\n                enabled: true\n            },\n            wearables: {\n                enabled: true,\n                expectedIds: []\n            },\n            groupables: {\n                enabled: true\n            },\n            containers: {\n                enabled: true,\n                tracked: []\n            }\n        }),\n        echo(text) {\n            client.displayService.echo(`%lightgray%[%deepskyblue%Inventory Manager%end%]:%end% ${text}`);\n        },\n        error(text) {\n            client.inventoryManager.echo(`%red%${text}%end%`);\n        },\n        save() {\n            client.systemService.save('inventory-manager', () => {\n                set_variable('inventory-manager:settings', client.inventoryManager.settings);\n                client.inventoryManager.echo('Settings saved.');\n            });\n        },\n        wield(item, hand) {\n            var _a;\n            const isId = !isNaN(Number((_a = item.match(/(\\d+)/)) === null || _a === void 0 ? void 0 : _a[1]));\n            const currentLeft = client.gmcpService.items.inv.find(value => { var _a; return (_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('l'); });\n            const currentRight = client.gmcpService.items.inv.find(value => { var _a; return (_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('L'); });\n            switch (hand) {\n                case 'left':\n                    client.inventoryManager.expectedWield = 'left';\n                    if (currentLeft) {\n                        client.inventoryManager.expectdUnwield = 'left';\n                    }\n                    if (isId) {\n                        client.inventoryManager.settings.wielding.expectedLeftId = item;\n                    }\n                    client.systemService.sendCommand(`wield left ${item}`);\n                    break;\n                case 'right':\n                    client.inventoryManager.expectedWield = 'right';\n                    if (currentRight) {\n                        client.inventoryManager.expectdUnwield = 'right';\n                    }\n                    if (isId) {\n                        client.inventoryManager.settings.wielding.expectedRightId = item;\n                    }\n                    client.systemService.sendCommand(`wield right ${item}`);\n                    break;\n                case 'both':\n                    client.inventoryManager.expectdUnwield = 'both';\n                    client.inventoryManager.expectedWield = 'both';\n                    if (isId) {\n                        client.inventoryManager.settings.wielding.expectedLeftId = item;\n                        client.inventoryManager.settings.wielding.expectedRightId = item;\n                    }\n                    client.systemService.sendCommand(`wield ${item}`);\n                    break;\n                default:\n                    if (currentLeft && currentRight) {\n                        client.inventoryManager.expectdUnwield = 'left';\n                        client.inventoryManager.expectedWield = 'left';\n                        if (isId) {\n                            client.inventoryManager.settings.wielding.expectedLeftId = item;\n                            client.inventoryManager.settings.wielding.expectedRightId = item;\n                        }\n                    }\n                    else if (currentLeft) {\n                        client.inventoryManager.expectedWield = 'right';\n                        if (isId) {\n                            client.inventoryManager.settings.wielding.expectedRightId = item;\n                        }\n                    }\n                    else {\n                        client.inventoryManager.expectedWield = 'left';\n                        if (isId) {\n                            client.inventoryManager.settings.wielding.expectedLeftId = item;\n                        }\n                    }\n                    client.systemService.sendCommand(`wield ${item}`);\n                    break;\n            }\n            if (currentLeft && currentRight && currentLeft === currentRight) {\n                client.inventoryManager.expectdUnwield = 'both';\n            }\n        },\n        unwield(itemOrHand) {\n            const currentLeft = client.gmcpService.items.inv.find(value => { var _a; return (_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('l'); });\n            const currentRight = client.gmcpService.items.inv.find(value => { var _a; return (_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('L'); });\n            if (currentLeft && currentRight && currentLeft === currentRight) {\n                client.inventoryManager.expectdUnwield = 'both';\n                client.inventoryManager.settings.wielding.expectedLeftId = undefined;\n                client.inventoryManager.settings.wielding.expectedRightId = undefined;\n            }\n            else {\n                switch (itemOrHand) {\n                    case 'left':\n                        client.inventoryManager.settings.wielding.expectedLeftId = undefined;\n                        client.inventoryManager.expectdUnwield = 'left';\n                        client.systemService.sendCommand(`unwield left`);\n                        break;\n                    case 'right':\n                        client.inventoryManager.settings.wielding.expectedRightId = undefined;\n                        client.inventoryManager.expectdUnwield = 'right';\n                        client.systemService.sendCommand(`unwield right`);\n                        break;\n                    default:\n                        client.inventoryManager.expectdUnwield = 'any';\n                        client.systemService.sendCommand(`unwield ${itemOrHand}`);\n                        break;\n                }\n            }\n            client.inventoryManager.save();\n        }\n    };\n    client.gmcpService.subscribe(['Char.Items.List', 'Char.Items.Add', 'Char.Items.Remove', 'Char.Items.Update'], args => {\n        if (args.gmcp_args.location === 'inv') {\n            switch (args.gmcp_method) {\n                case 'Char.Items.List':\n                    break;\n                case 'Char.Items.Add':\n                    break;\n                case 'Char.Items.Remove':\n                    break;\n                case 'Char.Items.Update':\n                    {\n                        const item = args.gmcp_args.item;\n                        const newItem = client.gmcpService.items.inv.find(value => value.id === item.id);\n                        const oldItem = client.gmcpService.previousItems.inv.find(value => value.id === item.id);\n                        if (newItem && oldItem) {\n                            updateItem(oldItem, newItem);\n                        }\n                    }\n                    break;\n            }\n            function hasAttribute(item, attribute) {\n                var _a;\n                return item.attrib !== undefined && ((_a = item.attrib) === null || _a === void 0 ? void 0 : _a.includes(attribute));\n            }\n            function attributeChange(oldItem, newItem, attribute) {\n                if (!hasAttribute(oldItem, attribute) && hasAttribute(newItem, attribute)) {\n                    return 'add';\n                }\n                else if (hasAttribute(oldItem, attribute) && !hasAttribute(newItem, attribute)) {\n                    return 'remove';\n                }\n                else {\n                    return 'none';\n                }\n            }\n            function updateItem(oldItem, item) {\n                // Wielded, Left\n                if (attributeChange(oldItem, item, 'l') === 'add') {\n                    if (client.inventoryManager.expectedWield === 'left') {\n                        client.inventoryManager.settings.wielding.expectedLeftId = item.id;\n                        client.inventoryManager.expectedWield = undefined;\n                        client.inventoryManager.save();\n                    }\n                }\n                else if (attributeChange(oldItem, item, 'l') === 'remove') {\n                    if (client.inventoryManager.settings.wielding.expectedLeftId === item.id) {\n                        if (['any', 'left', 'both'].includes(client.inventoryManager.expectdUnwield)) {\n                            client.inventoryManager.settings.wielding.expectedLeftId = undefined;\n                            client.inventoryManager.expectdUnwield = undefined;\n                        }\n                        else {\n                            client.systemService.sendCommand(`wield left ${item.id}`);\n                        }\n                    }\n                    else if (client.inventoryManager.expectdUnwield) {\n                        client.inventoryManager.expectdUnwield = undefined;\n                    }\n                }\n                // Wielded, Right\n                if (attributeChange(oldItem, item, 'L') === 'add') {\n                    if (client.inventoryManager.expectedWield === 'right') {\n                        client.inventoryManager.settings.wielding.expectedRightId = item.id;\n                        client.inventoryManager.expectedWield = undefined;\n                        client.inventoryManager.save();\n                    }\n                }\n                else if (attributeChange(oldItem, item, 'L') === 'remove') {\n                    if (client.inventoryManager.settings.wielding.expectedRightId === item.id) {\n                        if (['any', 'right', 'both'].includes(client.inventoryManager.expectdUnwield)) {\n                            client.inventoryManager.settings.wielding.expectedRightId = undefined;\n                            client.inventoryManager.expectdUnwield = undefined;\n                        }\n                        else {\n                            client.systemService.sendCommand(`wield right ${item.id}`);\n                        }\n                    }\n                    else if (client.inventoryManager.expectdUnwield) {\n                        client.inventoryManager.expectdUnwield = undefined;\n                    }\n                }\n            }\n        }\n        else if (args.gmcp_args.location.startsWith('rep')) {\n            const containerId = (args.gmcp_args.location.match(/rep(\\d+)/) || [])[1];\n            const trackedContainer = client.inventoryManager.settings.containers.tracked.find(value => value.id == containerId);\n            if (trackedContainer) {\n                // send_GMCP('Char.Items.Contents', Number(trackedContainer.id));\n            }\n        }\n    });\n    client.inventoryManager.settings.containers.tracked.forEach(container => {\n        send_GMCP('Char.Items.Contents', Number(container.id));\n    });\n    client.inventoryManager.echo('Loaded.');\n})(args);"
        },
        {
            "type": "group",
            "items": [
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        var _a;\n        run_function('inventory-manager:cli', ((_a = args[1]) === null || _a === void 0 ? void 0 : _a.trim().split(' ')) || '', 'Inventory Manager');\n    })(args);"
                        }
                    ],
                    "name": "cli",
                    "enabled": true,
                    "id": 7,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:im|inventory\\-manager|inventory manager) ([\\w\\W]+)?"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function () {\n        client.systemService.sendCommand('ii');\n        send_GMCP('Char.Items.Inv');\n    })(args);"
                        }
                    ],
                    "name": "Info Inventory (ii)",
                    "enabled": true,
                    "id": 3,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^ii$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        client.inventoryManager.wield(args[2], args[1]);\n    })(args);"
                        }
                    ],
                    "name": "Wield",
                    "enabled": true,
                    "id": 4,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^wield (?:(left|right) ?)?([\\w\\d]+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        client.inventoryManager.unwield(args[1]);\n    })(args);"
                        }
                    ],
                    "name": "Unwield",
                    "enabled": true,
                    "id": 5,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^unwield (left|right|[\\w\\d]+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function () {\n        client.systemService.sendCommand('swap hands');\n        const expectdLeft = client.inventoryManager.settings.wielding.expectedLeftId;\n        const expectdRight = client.inventoryManager.settings.wielding.expectedRightId;\n        client.inventoryManager.settings.wielding.expectedLeftId = expectdRight;\n        client.inventoryManager.settings.wielding.expectedRightId = expectdLeft;\n        client.inventoryManager.expectdSwapHands = true;\n        client.inventoryManager.save();\n    })(args);"
                        }
                    ],
                    "name": "Swap Hands",
                    "enabled": true,
                    "id": 6,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^swap hands$"
                }
            ],
            "actions": [],
            "name": "Aliases",
            "enabled": true,
            "id": 8
        },
        {
            "type": "group",
            "items": [
                {
                    "type": "function",
                    "items": [],
                    "actions": [],
                    "name": "inventory-manager:cli",
                    "enabled": true,
                    "id": 9,
                    "code": "(function (args) {\n    switch (args[0]) {\n        case undefined:\n        case 'show':\n            run_function('inventory-manager:cli-show', args.slice(1), 'Inventory Manager');\n            break;\n        case 'config':\n            if (args.length === 1) {\n                run_function('inventory-manager:cli-show', args.slice(1), 'Inventory Manager');\n            }\n            else {\n                switch (args[1]) {\n                    case 'enabled':\n                        switch (args[2]) {\n                            case 'true':\n                            case 'yes':\n                            case '1':\n                                client.inventoryManager.settings.enabled = true;\n                                client.inventoryManager.echo(`%lime%Enabled%end%.`);\n                                break;\n                            case 'false':\n                            case 'no':\n                            case '0':\n                                client.inventoryManager.settings.enabled = false;\n                                client.inventoryManager.echo(`%red%Disabled%end%.`);\n                                break;\n                            default:\n                                client.inventoryManager.error(`Could not parse value '${args[2]}'.`);\n                        }\n                        break;\n                    default:\n                        client.inventoryManager.error(`Unknown config setting '${args[1]}'.`);\n                }\n            }\n            break;\n        case 'help':\n        default:\n            break;\n        case 'pack':\n        case 'packs':\n        case 'container':\n        case 'containers':\n            run_function('inventory-manager:cli-containers', args.slice(1) || '', 'Inventory Manager');\n            break;\n    }\n})(args);"
                },
                {
                    "type": "function",
                    "items": [],
                    "actions": [],
                    "name": "inventory-manager:cli-containers",
                    "enabled": true,
                    "id": 10,
                    "code": "(function (args) {\n    switch (args[0]) {\n        case undefined:\n        case 'show':\n            client.displayService.table('Inventory Manager - Containers', [\n                {\n                    title: undefined,\n                    columns: 4,\n                    items: [\n                        {\n                            label: 'Enabled',\n                            value: 'Yes',\n                        }\n                    ]\n                },\n                {\n                    title: 'Tracking',\n                    columns: 1,\n                    items: client.gmcpService.items.inv\n                        .filter(item => { var _a; return (_a = item.attrib) === null || _a === void 0 ? void 0 : _a.includes('c'); })\n                        .map(container => {\n                        const label = `${container.id} ${container.name}`;\n                        const value = client.inventoryManager.settings.containers.tracked.find(value => value.id == container.id)\n                            ? client.displayService.commandify('%lime%Yes', `inventory-manager containers untrack ${container.id}`, `Untrack ${container.name}`)\n                            : client.displayService.commandify('%red%No', `inventory-manager containers track ${container.id}`, `Track ${container.name}`);\n                        return {\n                            label,\n                            value\n                        };\n                    })\n                }\n            ]);\n            break;\n        case 'track':\n            {\n                const containerId = args[1];\n                const container = client.gmcpService.items.inv.find(item => item.id === containerId);\n                if (!container) {\n                    client.inventoryManager.error(`Unknown container '${containerId}'.`);\n                    return;\n                }\n                if (!client.inventoryManager.settings.containers.tracked.find(value => value.id == container.id)) {\n                    client.inventoryManager.settings.containers.tracked.push({\n                        id: container.id,\n                        items: []\n                    });\n                    client.systemService.sendCommand(`close ${containerId}`);\n                    send_GMCP('Char.Items.Contents', Number(containerId));\n                    client.inventoryManager.echo(`Now tracking container '%lightgray%${container.name}%end% (%lightgray%${container.id}%end%)'.`);\n                }\n                else {\n                    client.inventoryManager.echo(`Already tracking container '%lightgray%${container.name}%end% (%lightgray%${container.id}%end%)'.`);\n                }\n            }\n            break;\n        case 'untrack':\n            {\n                const containerId = args[1];\n                const container = client.gmcpService.items.inv.find(item => item.id === containerId);\n                if (!container) {\n                    client.inventoryManager.error(`Unknown container '${containerId}'`);\n                    return;\n                }\n                const index = client.inventoryManager.settings.containers.tracked.findIndex(value => value.id === containerId);\n                if (index !== -1) {\n                    client.inventoryManager.settings.containers.tracked.splice(index, 1);\n                    client.inventoryManager.echo(`No longer tracking container '%lightgray%${container.name}%end% (%lightgray%${container.id})%end%'.`);\n                }\n                else {\n                    client.inventoryManager.echo(`Already not tracking container '%lightgray%${container.name}%end% (%lightgray%${container.id})%end%'.`);\n                }\n            }\n            break;\n        case 'help':\n        default:\n            break;\n    }\n})(args);"
                },
                {
                    "type": "function",
                    "items": [],
                    "actions": [],
                    "name": "inventory-manager:cli-show",
                    "enabled": true,
                    "id": 11,
                    "code": "(function () {\n    client.displayService.table('Inventory Manager', [\n        {\n            title: undefined,\n            columns: 3,\n            items: [\n                {\n                    label: 'Enabled',\n                    value: makeBooleanValue(client.inventoryManager.settings.enabled, 'inventory-manager config enabled false', 'Disable Inventory Manager.', 'inventory-manager config enabled true', 'Enable Inventory Manager.')\n                },\n                {\n                    label: 'Mode',\n                    value: 'Default',\n                }\n            ]\n        },\n        {\n            title: 'Wielding / Unwielding',\n            columns: 3,\n            items: [\n                {\n                    label: 'Enabled',\n                    value: 'Yes',\n                }\n            ]\n        },\n        {\n            title: 'Wearables',\n            columns: 3,\n            items: [\n                {\n                    label: 'Enabled',\n                    value: 'Yes',\n                }\n            ]\n        },\n        {\n            title: 'Groupables',\n            columns: 3,\n            items: [\n                {\n                    label: 'Enabled',\n                    value: 'Yes',\n                }\n            ]\n        },\n        {\n            title: 'Containers',\n            columns: 3,\n            items: [\n                {\n                    label: 'Enabled',\n                    value: 'Yes',\n                }\n            ]\n        },\n        {\n            title: 'Corpses',\n            columns: 3,\n            items: [\n                {\n                    label: 'Enabled',\n                    value: 'Yes',\n                }\n            ]\n        }\n    ]);\n    function makeBooleanValue(value, trueCommand, trueHint, falseCommand, falseHint) {\n        return value\n            ? client.displayService.commandify('%lime%Yes', trueCommand, trueHint)\n            : client.displayService.commandify('%red%No', falseCommand, falseHint);\n    }\n})(args);"
                }
            ],
            "actions": [],
            "name": "Functions",
            "enabled": true,
            "id": 12
        },
        {
            "type": "group",
            "items": [
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        const containerDescription = args[1];\n        if (!containerDescription) {\n            return;\n        }\n        const containers = client.gmcpService.items.inv\n            .filter(value => { var _a; return ((_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('c')) && value.name === containerDescription; });\n        const trackedContainers = client.inventoryManager.settings.containers.tracked\n            .filter(value => containers.map(value => value.id).includes(value.id));\n        if (trackedContainers.length === 0) {\n            return;\n        }\n        trackedContainers.forEach(trackedContainer => {\n            trackedContainer.closeable = true;\n            trackedContainer.possiblyOpen = false;\n        });\n        client.inventoryManager.expectedClose = undefined;\n        client.inventoryManager.save();\n    })(args);"
                        }
                    ],
                    "name": "Already Closed",
                    "enabled": true,
                    "id": 22,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^([\\w\\W]+) is already closed\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        const containerDescription = args[1];\n        if (!containerDescription) {\n            return;\n        }\n        const containers = client.gmcpService.items.inv\n            .filter(value => { var _a; return ((_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('c')) && value.name === containerDescription; });\n        const trackedContainers = client.inventoryManager.settings.containers.tracked\n            .filter(value => containers.map(value => value.id).includes(value.id));\n        if (trackedContainers.length === 0) {\n            return;\n        }\n        trackedContainers.forEach(trackedContainer => {\n            trackedContainer.closeable = true;\n            trackedContainer.possiblyOpen = true;\n        });\n        client.inventoryManager.expectedOpen = undefined;\n        client.inventoryManager.save();\n    })(args);"
                        }
                    ],
                    "name": "Already Closed",
                    "enabled": true,
                    "id": 23,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^([\\w\\W]+) is already open\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        const containerDescription = args[1];\n        if (!containerDescription) {\n            return;\n        }\n        const containers = client.gmcpService.items.inv\n            .filter(value => { var _a; return ((_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('c')) && value.name === containerDescription; });\n        const trackedContainers = client.inventoryManager.settings.containers.tracked\n            .filter(value => containers.map(value => value.id).includes(value.id));\n        if (trackedContainers.length === 0) {\n            return;\n        }\n        trackedContainers.forEach(trackedContainer => {\n            trackedContainer.closeable = true;\n            trackedContainer.possiblyOpen = false;\n        });\n        client.inventoryManager.expectedClose = undefined;\n        client.inventoryManager.save();\n    })(args);"
                        }
                    ],
                    "name": "Container Closed",
                    "enabled": true,
                    "id": 19,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^You close ([\\w\\W]+)\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        const containerDescription = args[1];\n        if (!containerDescription) {\n            return;\n        }\n        const containers = client.gmcpService.items.inv\n            .filter(value => { var _a; return ((_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('c')) && value.name === containerDescription; });\n        const trackedContainers = client.inventoryManager.settings.containers.tracked\n            .filter(value => containers.map(value => value.id).includes(value.id));\n        if (trackedContainers.length === 0) {\n            return;\n        }\n        trackedContainers.forEach(trackedContainer => {\n            trackedContainer.closeable = true;\n            trackedContainer.possiblyOpen = true;\n            send_GMCP('Char.Items.Contents', Number(trackedContainer.id));\n            if (client.inventoryManager.expectedOpen !== trackedContainer.id) {\n                client.systemService.sendCommand(`close ${trackedContainer.id}`);\n            }\n        });\n        client.inventoryManager.expectedOpen = undefined;\n        client.inventoryManager.save();\n    })(args);"
                        }
                    ],
                    "name": "Container Opened",
                    "enabled": true,
                    "id": 20,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^You open ([\\w\\W]+)\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        const containerDescription = args[1];\n        if (!containerDescription) {\n            return;\n        }\n        const containers = client.gmcpService.items.inv\n            .filter(value => { var _a; return ((_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('c')) && value.name === containerDescription; });\n        const trackedContainers = client.inventoryManager.settings.containers.tracked\n            .filter(value => containers.map(value => value.id).includes(value.id));\n        if (trackedContainers.length === 0) {\n            return;\n        }\n        trackedContainers.forEach(trackedContainer => {\n            if (client.inventoryManager.expectedOpen === trackedContainer.id || client.inventoryManager.expectedClose === trackedContainer.id) {\n                trackedContainer.closeable = false;\n                trackedContainer.possiblyOpen = undefined;\n            }\n        });\n        client.inventoryManager.save();\n    })(args);"
                        }
                    ],
                    "name": "Not Closeable",
                    "enabled": true,
                    "id": 21,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^([\\w\\W]+) doesn't have a lid or top of any sort to be (?:opened|closed)\\.$"
                },
                {
                    "type": "group",
                    "items": [
                        {
                            "type": "trigger",
                            "items": [],
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "(function () {\n        client.inventoryManager.expectdSwapHands = undefined;\n        client.inventoryManager.save();\n    })(args);"
                                }
                            ],
                            "name": "Swapped Hands:0",
                            "enabled": true,
                            "id": 13,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^You exchange the contents of your hands and begin wielding ([\\w\\W]+)? in your left hand and ([\\w\\W]+)? in your right\\.$"
                        },
                        {
                            "type": "trigger",
                            "items": [],
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "(function () {\n        client.inventoryManager.expectdSwapHands = undefined;\n        client.inventoryManager.save();\n    })(args);"
                                }
                            ],
                            "name": "Swapped Hands:1",
                            "enabled": true,
                            "id": 14,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^You shift ([\\w\\W]+)? from your (right|left) to (right|left) hand\\.$"
                        }
                    ],
                    "actions": [],
                    "name": "Swapped Hands",
                    "enabled": true,
                    "id": 15,
                    "matching": "regexp"
                },
                {
                    "type": "group",
                    "items": [
                        {
                            "type": "trigger",
                            "items": [],
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "(function () {\n        client.inventoryManager.expectedWield = undefined;\n        client.inventoryManager.expectdUnwield = undefined;\n        client.inventoryManager.save();\n    })(args);"
                                }
                            ],
                            "name": "Wield Failed:0",
                            "enabled": true,
                            "id": 16,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^What do you wish to wield\\?$"
                        },
                        {
                            "type": "trigger",
                            "items": [],
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "(function () {\n        client.inventoryManager.expectedWield = undefined;\n        client.inventoryManager.expectdUnwield = undefined;\n        client.inventoryManager.save();\n    })(args);"
                                }
                            ],
                            "name": "Wield Failed:1",
                            "enabled": true,
                            "id": 17,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^You are already wielding that\\.$"
                        }
                    ],
                    "actions": [],
                    "name": "Wield Failed",
                    "enabled": true,
                    "id": 18,
                    "matching": "regexp"
                }
            ],
            "actions": [],
            "name": "Triggers",
            "enabled": true,
            "id": 24
        }
    ],
    "actions": [],
    "name": "Inventory Manager",
    "enabled": true,
    "id": 1,
    "description": "An Inventory Manager."
}