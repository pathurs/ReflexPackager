{
    "type": "group",
    "items": [
        {
            "type": "function",
            "items": [],
            "actions": [],
            "name": "onLoad",
            "enabled": true,
            "id": 2,
            "code": "client.inventoryManager = {\r\n        settings: client.systemService.defaultsDeep(get_variable('inventory-manager:settings'), {\r\n            enabled: true,\r\n            wielding: {\r\n                enabled: true\r\n            },\r\n            wearables: {\r\n                enabled: true,\r\n                expectedIds: []\r\n            },\r\n            groupables: {\r\n                enabled: true\r\n            },\r\n            containers: {\r\n                enabled: true,\r\n                tracked: []\r\n            }\r\n        }),\r\n        echo(text) {\r\n            client.displayService.echo(`%lightgray%[%deepskyblue%Inventory Manager%end%]:%end% ${text}`);\r\n        },\r\n        error(text) {\r\n            client.inventoryManager.echo(`%red%${text}%end%`);\r\n        },\r\n        save() {\r\n            client.systemService.save('inventory-manager', () => {\r\n                set_variable('inventory-manager:settings', client.inventoryManager.settings);\r\n                client.inventoryManager.echo('Settings saved.');\r\n            });\r\n        },\r\n        wield(item, hand) {\r\n            var _a;\r\n            const isId = !isNaN(Number((_a = item.match(/(\\d+)/)) === null || _a === void 0 ? void 0 : _a[1]));\r\n            const currentLeft = client.gmcpService.items.inv.find(value => { var _a; return (_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('l'); });\r\n            const currentRight = client.gmcpService.items.inv.find(value => { var _a; return (_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('L'); });\r\n            switch (hand) {\r\n                case 'left':\r\n                    client.inventoryManager.expectedWield = 'left';\r\n                    if (currentLeft) {\r\n                        client.inventoryManager.expectdUnwield = 'left';\r\n                    }\r\n                    if (isId) {\r\n                        client.inventoryManager.settings.wielding.expectedLeftId = item;\r\n                    }\r\n                    client.systemService.sendCommand(`wield left ${item}`);\r\n                    break;\r\n                case 'right':\r\n                    client.inventoryManager.expectedWield = 'right';\r\n                    if (currentRight) {\r\n                        client.inventoryManager.expectdUnwield = 'right';\r\n                    }\r\n                    if (isId) {\r\n                        client.inventoryManager.settings.wielding.expectedRightId = item;\r\n                    }\r\n                    client.systemService.sendCommand(`wield right ${item}`);\r\n                    break;\r\n                case 'both':\r\n                    client.inventoryManager.expectdUnwield = 'both';\r\n                    client.inventoryManager.expectedWield = 'both';\r\n                    if (isId) {\r\n                        client.inventoryManager.settings.wielding.expectedLeftId = item;\r\n                        client.inventoryManager.settings.wielding.expectedRightId = item;\r\n                    }\r\n                    client.systemService.sendCommand(`wield ${item}`);\r\n                    break;\r\n                default:\r\n                    if (currentLeft && currentRight) {\r\n                        client.inventoryManager.expectdUnwield = 'left';\r\n                        client.inventoryManager.expectedWield = 'left';\r\n                        if (isId) {\r\n                            client.inventoryManager.settings.wielding.expectedLeftId = item;\r\n                            client.inventoryManager.settings.wielding.expectedRightId = item;\r\n                        }\r\n                    }\r\n                    else if (currentLeft) {\r\n                        client.inventoryManager.expectedWield = 'right';\r\n                        if (isId) {\r\n                            client.inventoryManager.settings.wielding.expectedRightId = item;\r\n                        }\r\n                    }\r\n                    else {\r\n                        client.inventoryManager.expectedWield = 'left';\r\n                        if (isId) {\r\n                            client.inventoryManager.settings.wielding.expectedLeftId = item;\r\n                        }\r\n                    }\r\n                    client.systemService.sendCommand(`wield ${item}`);\r\n                    break;\r\n            }\r\n            if (currentLeft && currentRight && currentLeft === currentRight) {\r\n                client.inventoryManager.expectdUnwield = 'both';\r\n            }\r\n        },\r\n        unwield(itemOrHand) {\r\n            const currentLeft = client.gmcpService.items.inv.find(value => { var _a; return (_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('l'); });\r\n            const currentRight = client.gmcpService.items.inv.find(value => { var _a; return (_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('L'); });\r\n            if (currentLeft && currentRight && currentLeft === currentRight) {\r\n                client.inventoryManager.expectdUnwield = 'both';\r\n                client.inventoryManager.settings.wielding.expectedLeftId = undefined;\r\n                client.inventoryManager.settings.wielding.expectedRightId = undefined;\r\n            }\r\n            else {\r\n                switch (itemOrHand) {\r\n                    case 'left':\r\n                        client.inventoryManager.settings.wielding.expectedLeftId = undefined;\r\n                        client.inventoryManager.expectdUnwield = 'left';\r\n                        break;\r\n                    case 'right':\r\n                        client.inventoryManager.settings.wielding.expectedRightId = undefined;\r\n                        client.inventoryManager.expectdUnwield = 'right';\r\n                        break;\r\n                    default:\r\n                        client.inventoryManager.expectdUnwield = 'any';\r\n                        break;\r\n                }\r\n            }\r\n            client.systemService.sendCommand(`unwield ${itemOrHand}`);\r\n            client.inventoryManager.save();\r\n        }\r\n    };\r\n    client.gmcpService.subscribe(['Char.Items.List', 'Char.Items.Add', 'Char.Items.Remove', 'Char.Items.Update'], args => {\r\n        if (args.gmcp_args.location === 'inv') {\r\n            switch (args.gmcp_method) {\r\n                case 'Char.Items.List':\r\n                    break;\r\n                case 'Char.Items.Add':\r\n                    break;\r\n                case 'Char.Items.Remove':\r\n                    break;\r\n                case 'Char.Items.Update':\r\n                    {\r\n                        const item = args.gmcp_args.item;\r\n                        const newItem = client.gmcpService.items.inv.find(value => value.id === item.id);\r\n                        const oldItem = client.gmcpService.previousItems.inv.find(value => value.id === item.id);\r\n                        if (newItem && oldItem) {\r\n                            updateItem(oldItem, newItem);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n            function hasAttribute(item, attribute) {\r\n                var _a;\r\n                return item.attrib !== undefined && ((_a = item.attrib) === null || _a === void 0 ? void 0 : _a.includes(attribute));\r\n            }\r\n            function attributeChange(oldItem, newItem, attribute) {\r\n                if (!hasAttribute(oldItem, attribute) && hasAttribute(newItem, attribute)) {\r\n                    return 'add';\r\n                }\r\n                else if (hasAttribute(oldItem, attribute) && !hasAttribute(newItem, attribute)) {\r\n                    return 'remove';\r\n                }\r\n                else {\r\n                    return 'none';\r\n                }\r\n            }\r\n            function updateItem(oldItem, item) {\r\n                // Wielded, Left\r\n                if (attributeChange(oldItem, item, 'l') === 'add') {\r\n                    if (client.inventoryManager.expectedWield === 'left') {\r\n                        client.inventoryManager.settings.wielding.expectedLeftId = item.id;\r\n                        client.inventoryManager.expectedWield = undefined;\r\n                        client.inventoryManager.save();\r\n                    }\r\n                }\r\n                else if (attributeChange(oldItem, item, 'l') === 'remove') {\r\n                    if (client.inventoryManager.settings.wielding.expectedLeftId === item.id) {\r\n                        if (['any', 'left', 'both'].includes(client.inventoryManager.expectdUnwield)) {\r\n                            client.inventoryManager.settings.wielding.expectedLeftId = undefined;\r\n                            client.inventoryManager.expectdUnwield = undefined;\r\n                        }\r\n                        else {\r\n                            client.systemService.sendCommand(`wield left ${item.id}`);\r\n                        }\r\n                    }\r\n                    else if (client.inventoryManager.expectdUnwield) {\r\n                        client.inventoryManager.expectdUnwield = undefined;\r\n                    }\r\n                }\r\n                // Wielded, Right\r\n                if (attributeChange(oldItem, item, 'L') === 'add') {\r\n                    if (client.inventoryManager.expectedWield === 'right') {\r\n                        client.inventoryManager.settings.wielding.expectedRightId = item.id;\r\n                        client.inventoryManager.expectedWield = undefined;\r\n                        client.inventoryManager.save();\r\n                    }\r\n                }\r\n                else if (attributeChange(oldItem, item, 'L') === 'remove') {\r\n                    if (client.inventoryManager.settings.wielding.expectedRightId === item.id) {\r\n                        if (['any', 'right', 'both'].includes(client.inventoryManager.expectdUnwield)) {\r\n                            client.inventoryManager.settings.wielding.expectedRightId = undefined;\r\n                            client.inventoryManager.expectdUnwield = undefined;\r\n                        }\r\n                        else {\r\n                            client.systemService.sendCommand(`wield right ${item.id}`);\r\n                        }\r\n                    }\r\n                    else if (client.inventoryManager.expectdUnwield) {\r\n                        client.inventoryManager.expectdUnwield = undefined;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if (args.gmcp_args.location.startsWith('rep')) {\r\n            const containerId = (args.gmcp_args.location.match(/rep(\\d+)/) || [])[1];\r\n            const trackedContainer = client.inventoryManager.settings.containers.tracked.find(value => value.id == containerId);\r\n            if (trackedContainer) {\r\n                // send_GMCP('Char.Items.Contents', Number(trackedContainer.id));\r\n            }\r\n        }\r\n    });\r\n    // client.inventoryManager.settings.containers.tracked.forEach(container => {\r\n    //     send_GMCP('Char.Items.Contents', Number(container.id));\r\n    // });\r\n    client.inventoryManager.echo('Loaded.');\r\n"
        },
        {
            "type": "group",
            "items": [
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "var _a;\r\n        run_function('inventory-manager:cli', ((_a = args[1]) === null || _a === void 0 ? void 0 : _a.trim().split(' ')) || '', 'Inventory Manager');\r\n    "
                        }
                    ],
                    "name": "cli",
                    "enabled": true,
                    "id": 7,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:im|inventory\\-manager|inventory manager) ([\\w\\W]+)?"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "client.systemService.sendCommand('ii');\r\n        send_GMCP('Char.Items.Inv');\r\n    "
                        }
                    ],
                    "name": "Info Inventory (ii)",
                    "enabled": true,
                    "id": 3,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^ii$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "client.inventoryManager.wield(args[2], args[1]);\r\n    "
                        }
                    ],
                    "name": "Wield",
                    "enabled": true,
                    "id": 4,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^wield (?:(left|right) ?)?([\\w\\d]+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "client.inventoryManager.unwield(args[1]);\r\n    "
                        }
                    ],
                    "name": "Unwield",
                    "enabled": true,
                    "id": 5,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^unwield (left|right|[\\w\\d]+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "client.systemService.sendCommand('swap hands');\r\n        const expectdLeft = client.inventoryManager.settings.wielding.expectedLeftId;\r\n        const expectdRight = client.inventoryManager.settings.wielding.expectedRightId;\r\n        client.inventoryManager.settings.wielding.expectedLeftId = expectdRight;\r\n        client.inventoryManager.settings.wielding.expectedRightId = expectdLeft;\r\n        client.inventoryManager.expectdSwapHands = true;\r\n        client.inventoryManager.save();\r\n    "
                        }
                    ],
                    "name": "Swap Hands",
                    "enabled": true,
                    "id": 6,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^swap hands$"
                }
            ],
            "actions": [],
            "name": "Aliases",
            "enabled": true,
            "id": 8
        },
        {
            "type": "group",
            "items": [
                {
                    "type": "function",
                    "items": [],
                    "actions": [],
                    "name": "inventory-manager:cli",
                    "enabled": true,
                    "id": 9,
                    "code": "switch (args[0]) {\r\n        case undefined:\r\n        case 'show':\r\n            run_function('inventory-manager:cli-show', args.slice(1), 'Inventory Manager');\r\n            break;\r\n        case 'config':\r\n            if (args.length === 1) {\r\n                run_function('inventory-manager:cli-show', args.slice(1), 'Inventory Manager');\r\n            }\r\n            else {\r\n                switch (args[1]) {\r\n                    case 'enabled':\r\n                        switch (args[2]) {\r\n                            case 'true':\r\n                            case 'yes':\r\n                            case '1':\r\n                                client.inventoryManager.settings.enabled = true;\r\n                                client.inventoryManager.echo(`%lime%Enabled%end%.`);\r\n                                break;\r\n                            case 'false':\r\n                            case 'no':\r\n                            case '0':\r\n                                client.inventoryManager.settings.enabled = false;\r\n                                client.inventoryManager.echo(`%red%Disabled%end%.`);\r\n                                break;\r\n                            default:\r\n                                client.inventoryManager.error(`Could not parse value '${args[2]}'.`);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        client.inventoryManager.error(`Unknown config setting '${args[1]}'.`);\r\n                }\r\n            }\r\n            break;\r\n        case 'help':\r\n        default:\r\n            break;\r\n        case 'pack':\r\n        case 'packs':\r\n        case 'container':\r\n        case 'containers':\r\n            run_function('inventory-manager:cli-containers', args.slice(1) || '', 'Inventory Manager');\r\n            break;\r\n    }\r\n"
                },
                {
                    "type": "function",
                    "items": [],
                    "actions": [],
                    "name": "inventory-manager:cli-containers",
                    "enabled": true,
                    "id": 10,
                    "code": "switch (args[0]) {\r\n        case undefined:\r\n        case 'show':\r\n            client.displayService.table('Inventory Manager - Containers', [\r\n                {\r\n                    title: undefined,\r\n                    columns: 4,\r\n                    items: [\r\n                        {\r\n                            label: 'Enabled',\r\n                            value: 'Yes',\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    title: 'Tracking',\r\n                    columns: 1,\r\n                    items: client.gmcpService.items.inv\r\n                        .filter(item => { var _a; return (_a = item.attrib) === null || _a === void 0 ? void 0 : _a.includes('c'); })\r\n                        .map(container => {\r\n                        const label = `${container.id} ${container.name}`;\r\n                        const value = client.inventoryManager.settings.containers.tracked.find(value => value.id == container.id)\r\n                            ? client.displayService.commandify('%lime%Yes', `inventory-manager containers untrack ${container.id}`, `Untrack ${container.name}`)\r\n                            : client.displayService.commandify('%red%No', `inventory-manager containers track ${container.id}`, `Track ${container.name}`);\r\n                        return {\r\n                            label,\r\n                            value\r\n                        };\r\n                    })\r\n                }\r\n            ]);\r\n            break;\r\n        case 'track':\r\n            {\r\n                const containerId = args[1];\r\n                const container = client.gmcpService.items.inv.find(item => item.id === containerId);\r\n                if (!container) {\r\n                    client.inventoryManager.error(`Unknown container '${containerId}'.`);\r\n                    return;\r\n                }\r\n                if (!client.inventoryManager.settings.containers.tracked.find(value => value.id == container.id)) {\r\n                    client.inventoryManager.settings.containers.tracked.push({\r\n                        id: container.id,\r\n                        items: []\r\n                    });\r\n                    client.systemService.sendCommand(`close ${containerId}`);\r\n                    send_GMCP('Char.Items.Contents', Number(containerId));\r\n                    client.inventoryManager.echo(`Now tracking container '%lightgray%${container.name}%end% (%lightgray%${container.id}%end%)'.`);\r\n                }\r\n                else {\r\n                    client.inventoryManager.echo(`Already tracking container '%lightgray%${container.name}%end% (%lightgray%${container.id}%end%)'.`);\r\n                }\r\n            }\r\n            break;\r\n        case 'untrack':\r\n            {\r\n                const containerId = args[1];\r\n                const container = client.gmcpService.items.inv.find(item => item.id === containerId);\r\n                if (!container) {\r\n                    client.inventoryManager.error(`Unknown container '${containerId}'`);\r\n                    return;\r\n                }\r\n                const index = client.inventoryManager.settings.containers.tracked.findIndex(value => value.id === containerId);\r\n                if (index !== -1) {\r\n                    client.inventoryManager.settings.containers.tracked.splice(index, 1);\r\n                    client.inventoryManager.echo(`No longer tracking container '%lightgray%${container.name}%end% (%lightgray%${container.id})%end%'.`);\r\n                }\r\n                else {\r\n                    client.inventoryManager.echo(`Already not tracking container '%lightgray%${container.name}%end% (%lightgray%${container.id})%end%'.`);\r\n                }\r\n            }\r\n            break;\r\n        case 'help':\r\n        default:\r\n            break;\r\n    }\r\n"
                },
                {
                    "type": "function",
                    "items": [],
                    "actions": [],
                    "name": "inventory-manager:cli-show",
                    "enabled": true,
                    "id": 11,
                    "code": "client.displayService.table('Inventory Manager', [\r\n        {\r\n            title: undefined,\r\n            columns: 3,\r\n            items: [\r\n                {\r\n                    label: 'Enabled',\r\n                    value: makeBooleanValue(client.inventoryManager.settings.enabled, 'inventory-manager config enabled false', 'Disable Inventory Manager.', 'inventory-manager config enabled true', 'Enable Inventory Manager.')\r\n                },\r\n                {\r\n                    label: 'Mode',\r\n                    value: 'Default',\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            title: 'Wielding / Unwielding',\r\n            columns: 3,\r\n            items: [\r\n                {\r\n                    label: 'Enabled',\r\n                    value: 'Yes',\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            title: 'Wearables',\r\n            columns: 3,\r\n            items: [\r\n                {\r\n                    label: 'Enabled',\r\n                    value: 'Yes',\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            title: 'Groupables',\r\n            columns: 3,\r\n            items: [\r\n                {\r\n                    label: 'Enabled',\r\n                    value: 'Yes',\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            title: 'Containers',\r\n            columns: 3,\r\n            items: [\r\n                {\r\n                    label: 'Enabled',\r\n                    value: 'Yes',\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            title: 'Corpses',\r\n            columns: 3,\r\n            items: [\r\n                {\r\n                    label: 'Enabled',\r\n                    value: 'Yes',\r\n                }\r\n            ]\r\n        }\r\n    ]);\r\n    function makeBooleanValue(value, trueCommand, trueHint, falseCommand, falseHint) {\r\n        return value\r\n            ? client.displayService.commandify('%lime%Yes', trueCommand, trueHint)\r\n            : client.displayService.commandify('%red%No', falseCommand, falseHint);\r\n    }\r\n"
                }
            ],
            "actions": [],
            "name": "Functions",
            "enabled": true,
            "id": 12
        },
        {
            "type": "group",
            "items": [
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "const containerDescription = args[1];\r\n        if (!containerDescription) {\r\n            return;\r\n        }\r\n        const containers = client.gmcpService.items.inv\r\n            .filter(value => { var _a; return ((_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('c')) && value.name === containerDescription; });\r\n        const trackedContainers = client.inventoryManager.settings.containers.tracked\r\n            .filter(value => containers.map(value => value.id).includes(value.id));\r\n        if (trackedContainers.length === 0) {\r\n            return;\r\n        }\r\n        let initial = JSON.stringify(trackedContainers);\r\n        trackedContainers.forEach(trackedContainer => {\r\n            trackedContainer.closeable = true;\r\n            trackedContainer.possiblyOpen = false;\r\n        });\r\n        let changed = JSON.stringify(trackedContainers);\r\n        client.inventoryManager.expectedClose = undefined;\r\n        if (initial !== changed) {\r\n            client.inventoryManager.save();\r\n        }\r\n    "
                        }
                    ],
                    "name": "Already Closed",
                    "enabled": true,
                    "id": 22,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^([\\w\\W]+) is already closed\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "const containerDescription = args[1];\r\n        if (!containerDescription) {\r\n            return;\r\n        }\r\n        const containers = client.gmcpService.items.inv\r\n            .filter(value => { var _a; return ((_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('c')) && value.name === containerDescription; });\r\n        const trackedContainers = client.inventoryManager.settings.containers.tracked\r\n            .filter(value => containers.map(value => value.id).includes(value.id));\r\n        if (trackedContainers.length === 0) {\r\n            return;\r\n        }\r\n        trackedContainers.forEach(trackedContainer => {\r\n            trackedContainer.closeable = true;\r\n            trackedContainer.possiblyOpen = true;\r\n        });\r\n        client.inventoryManager.expectedOpen = undefined;\r\n        client.inventoryManager.save();\r\n    "
                        }
                    ],
                    "name": "Already Closed",
                    "enabled": true,
                    "id": 23,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^([\\w\\W]+) is already open\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "const containerDescription = args[1];\r\n        if (!containerDescription) {\r\n            return;\r\n        }\r\n        const containers = client.gmcpService.items.inv\r\n            .filter(value => { var _a; return ((_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('c')) && value.name === containerDescription; });\r\n        const trackedContainers = client.inventoryManager.settings.containers.tracked\r\n            .filter(value => containers.map(value => value.id).includes(value.id));\r\n        if (trackedContainers.length === 0) {\r\n            return;\r\n        }\r\n        trackedContainers.forEach(trackedContainer => {\r\n            trackedContainer.closeable = true;\r\n            trackedContainer.possiblyOpen = false;\r\n        });\r\n        client.inventoryManager.expectedClose = undefined;\r\n        client.inventoryManager.save();\r\n    "
                        }
                    ],
                    "name": "Container Closed",
                    "enabled": true,
                    "id": 19,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^You close ([\\w\\W]+)\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "const containerDescription = args[1];\r\n        if (!containerDescription) {\r\n            return;\r\n        }\r\n        const containers = client.gmcpService.items.inv\r\n            .filter(value => { var _a; return ((_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('c')) && value.name === containerDescription; });\r\n        const trackedContainers = client.inventoryManager.settings.containers.tracked\r\n            .filter(value => containers.map(value => value.id).includes(value.id));\r\n        if (trackedContainers.length === 0) {\r\n            return;\r\n        }\r\n        trackedContainers.forEach(trackedContainer => {\r\n            trackedContainer.closeable = true;\r\n            trackedContainer.possiblyOpen = true;\r\n            send_GMCP('Char.Items.Contents', Number(trackedContainer.id));\r\n            if (client.inventoryManager.expectedOpen !== trackedContainer.id) {\r\n                client.systemService.sendCommand(`close ${trackedContainer.id}`);\r\n            }\r\n        });\r\n        client.inventoryManager.expectedOpen = undefined;\r\n        client.inventoryManager.save();\r\n    "
                        }
                    ],
                    "name": "Container Opened",
                    "enabled": true,
                    "id": 20,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^You open ([\\w\\W]+)\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "const containerDescription = args[1];\r\n        if (!containerDescription) {\r\n            return;\r\n        }\r\n        const containers = client.gmcpService.items.inv\r\n            .filter(value => { var _a; return ((_a = value.attrib) === null || _a === void 0 ? void 0 : _a.includes('c')) && value.name === containerDescription; });\r\n        const trackedContainers = client.inventoryManager.settings.containers.tracked\r\n            .filter(value => containers.map(value => value.id).includes(value.id));\r\n        if (trackedContainers.length === 0) {\r\n            return;\r\n        }\r\n        trackedContainers.forEach(trackedContainer => {\r\n            if (client.inventoryManager.expectedOpen === trackedContainer.id || client.inventoryManager.expectedClose === trackedContainer.id) {\r\n                trackedContainer.closeable = false;\r\n                trackedContainer.possiblyOpen = undefined;\r\n            }\r\n        });\r\n        client.inventoryManager.save();\r\n    "
                        }
                    ],
                    "name": "Not Closeable",
                    "enabled": true,
                    "id": 21,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^([\\w\\W]+) doesn't have a lid or top of any sort to be (?:opened|closed)\\.$"
                },
                {
                    "type": "group",
                    "items": [
                        {
                            "type": "trigger",
                            "items": [],
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "client.inventoryManager.expectdSwapHands = undefined;\r\n        client.inventoryManager.save();\r\n    "
                                }
                            ],
                            "name": "Swapped Hands:0",
                            "enabled": true,
                            "id": 14,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^You exchange the contents of your hands and begin wielding ([\\w\\W]+)? in your left hand and ([\\w\\W]+)? in your right\\.$"
                        },
                        {
                            "type": "trigger",
                            "items": [],
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "client.inventoryManager.expectdSwapHands = undefined;\r\n        client.inventoryManager.save();\r\n    "
                                }
                            ],
                            "name": "Swapped Hands:1",
                            "enabled": true,
                            "id": 15,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^You shift ([\\w\\W]+)? from your (right|left) to (right|left) hand\\.$"
                        }
                    ],
                    "actions": [
                        {
                            "action": "script",
                            "script": "client.inventoryManager.expectdSwapHands = undefined;\r\n        client.inventoryManager.save();\r\n    "
                        }
                    ],
                    "name": "Swapped Hands",
                    "enabled": true,
                    "id": 13,
                    "matching": "multitrigger",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": ""
                },
                {
                    "type": "group",
                    "items": [
                        {
                            "type": "trigger",
                            "items": [],
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "client.inventoryManager.expectedWield = undefined;\r\n        client.inventoryManager.expectdUnwield = undefined;\r\n        client.inventoryManager.save();\r\n    "
                                }
                            ],
                            "name": "Wield Failed:0",
                            "enabled": true,
                            "id": 17,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^What do you wish to wield\\?$"
                        },
                        {
                            "type": "trigger",
                            "items": [],
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "client.inventoryManager.expectedWield = undefined;\r\n        client.inventoryManager.expectdUnwield = undefined;\r\n        client.inventoryManager.save();\r\n    "
                                }
                            ],
                            "name": "Wield Failed:1",
                            "enabled": true,
                            "id": 18,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^You are already wielding that\\.$"
                        }
                    ],
                    "actions": [
                        {
                            "action": "script",
                            "script": "client.inventoryManager.expectedWield = undefined;\r\n        client.inventoryManager.expectdUnwield = undefined;\r\n        client.inventoryManager.save();\r\n    "
                        }
                    ],
                    "name": "Wield Failed",
                    "enabled": true,
                    "id": 16,
                    "matching": "multitrigger",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": ""
                }
            ],
            "actions": [],
            "name": "Triggers",
            "enabled": true,
            "id": 24
        }
    ],
    "actions": [],
    "name": "Inventory Manager",
    "enabled": true,
    "id": 1,
    "description": "An Inventory Manager."
}