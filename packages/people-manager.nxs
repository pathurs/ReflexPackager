{
    "type": "group",
    "items": [
        {
            "type": "group",
            "items": [
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "client.peopleManager.honoursName = args[1].toLowerCase();\r\n        client.systemService.sendCommand(`honours ${client.peopleManager.honoursName}`, true);\r\n        client.peopleManager.honoursTimerId = setTimeout(() => {\r\n            client.peopleManager.honoursName = undefined;\r\n            client.peopleManager.honoursTimerId = undefined;\r\n        }, 1000);\r\n    "
                        }
                    ],
                    "name": "honours",
                    "enabled": true,
                    "id": 2,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "text": "\\s*honou?rs\\s+([A-Za-z]+)\\s*$"
                }
            ],
            "actions": [],
            "name": "Aliases",
            "enabled": true,
            "id": 3
        },
        {
            "type": "group",
            "items": [
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "\n    var regExpArray = [\n        /^Enemies of the City of ([A-Z][a-z]+):$/,\n    /^([\\w\\W]+)$/,\n    /^Total: (\\d+)$/\n    ];\n\n    var indexOffset = current_block.indexOf(current_line);\n    var lastIndex =  indexOffset + regExpArray.length - 1;\n\n    // Override args\n    var args = {\n        matches: [],\n        block: current_block,\n        lines: []\n    };\n\n    var prompt = current_block[current_block.length - 1];\n\n    if (prompt.parsed_prompt) {\n        args.prompt = prompt;\n    }\n\n    for (let i = 0; i < regExpArray.length; i++) {\n        const lineIndex = i + indexOffset;\n\n        if (!current_block[lineIndex] || !current_block[lineIndex].parsed_line) {\n            break;\n        }\n\n        var currentRegExp = regExpArray[i];\n        var currentText = current_block[lineIndex].parsed_line.text();\n\n        if (!currentRegExp.test(currentText)) {\n            break;\n        }\n\n        args.matches.push(currentText.match(currentRegExp));\n        args.lines.push(current_block[lineIndex]);\n\n        if (lineIndex === lastIndex) {\n            const cityName = args.matches[0][1].toLowerCase();\r\n        const peopleLine = args.lines[1];\r\n        if ('parsed_line' in peopleLine) {\r\n            if (peopleLine.line !== 'None') {\r\n                Object\r\n                    .values(client.peopleManager.settings.people)\r\n                    .forEach(person => client.peopleManager.removeEnemyOf(person, cityName));\r\n                const cityEnemyNames = peopleLine.parsed_line.text().split(', ');\r\n                cityEnemyNames.forEach(cityEnemyName => {\r\n                    const person = client.peopleManager.getOrCreatePerson(cityEnemyName);\r\n                    if (!client.peopleManager.isEnemyOf(person, cityName)) {\r\n                        client.peopleManager.setEnemyOf(person, cityName);\r\n                        client.peopleManager.updatePerson(person.name, person);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    \n        }\n    }\n    "
                        }
                    ],
                    "name": "City Enemies",
                    "enabled": true,
                    "id": 7,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^Enemies of the City of ([A-Z][a-z]+):$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "\n    var regExpArray = [\n        /^Citizen                                                   Rank CT  Class$/,\n    /^-------                                                   ---- --  -----$/\n    ];\n\n    var indexOffset = current_block.indexOf(current_line);\n    var lastIndex =  indexOffset + regExpArray.length - 1;\n\n    // Override args\n    var args = {\n        matches: [],\n        block: current_block,\n        lines: []\n    };\n\n    var prompt = current_block[current_block.length - 1];\n\n    if (prompt.parsed_prompt) {\n        args.prompt = prompt;\n    }\n\n    for (let i = 0; i < regExpArray.length; i++) {\n        const lineIndex = i + indexOffset;\n\n        if (!current_block[lineIndex] || !current_block[lineIndex].parsed_line) {\n            break;\n        }\n\n        var currentRegExp = regExpArray[i];\n        var currentText = current_block[lineIndex].parsed_line.text();\n\n        if (!currentRegExp.test(currentText)) {\n            break;\n        }\n\n        args.matches.push(currentText.match(currentRegExp));\n        args.lines.push(current_block[lineIndex]);\n\n        if (lineIndex === lastIndex) {\n            var _a;\r\n        const nameRegExp = /\\u001b\\[38;5;006m([A-Z][a-z]+)\\u001b\\[38;5;007m/;\r\n        for (const line of args.block) {\r\n            if ('parsed_line' in line) {\r\n                const name = (line.line.match(nameRegExp) || [])[1];\r\n                if (name) {\r\n                    const person = client.peopleManager.getOrCreatePerson(name);\r\n                    person.lastSeen = Date.now();\r\n                    if ((_a = client.peopleManager.you) === null || _a === void 0 ? void 0 : _a.city) {\r\n                        person.city = client.peopleManager.you.city;\r\n                    }\r\n                    client.peopleManager.updatePerson(person.name, person);\r\n                }\r\n            }\r\n        }\r\n    \n        }\n    }\n    "
                        }
                    ],
                    "name": "City Who",
                    "enabled": true,
                    "id": 4,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^Citizen                                                   Rank CT  Class$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "var _a;\r\n        const indexOffset = current_block.indexOf(current_line);\r\n        const fullNameGenderRaceRegExp = /^([\\w\\W]+) \\((male|female) ([A-Za-z' ]+)\\)\\.$/;\r\n        const ageRegExp = /^(?:He|She) is (\\d+) years old, having been born on the (\\d+)(?:st|nd|rd|th) of (Sarapin|Daedalan|Aeguary|Miraman|Scarlatan|Ero|Valnuary|Lupar|Phaestian|Chronos|Glacian|Mayan), (\\d+) years after the fall of the Seleucarian Empire\\.$/;\r\n        const ageHiddenRegExp = /^(?:His|Her) date of birth is hidden by the sand of Aeon\\.$/;\r\n        const ageOldRegExp = /^(?:He|She) was born before the fall of the Seleucarian Empire\\.$/;\r\n        const ageImmortalRegExp = /^(?:He|She) was born before time was counted\\.$/;\r\n        const xpRankRegExp = /^(?:He|She) is ranked (\\d+)(?:st|nd|rd|th) in Achaea\\./;\r\n        const xpUnrankedRegExp = /^(?:He|She) is unranked in Achaea\\./;\r\n        const combatRankRegExp = /^(?:He|She) is the (\\d+)(?:st|nd|rd|th) ranked combatant with a rating of (\\d+)\\.$/;\r\n        const infamousRegExp = /^(?:He|She) is one of the Infamous\\.$/;\r\n        const notInfamousRegExp = /^(?:He|She) is not known for acts of infamy\\.$/;\r\n        const markRegExp = /^(?:He|She) is a member of the (Ivory|Quisalis) Mark\\.$/;\r\n        const markRankRegExp = /^(?:He|She) is the [\\w\\W]+? in the (Ivory|Quisalis) Mark\\.$/;\r\n        const cityRankRegExp = /^(?:He|She) is an? ([A-Z][a-z]+) in (Ashtan|Cyrene|Eleusis|Hashan|Mhaldor|Targossas)\\.$/;\r\n        const cityArmyRegExp = /^(?:He|She) is ([\\w\\W]+) in the army of (Ashtan|Cyrene|Eleusis|Hashan|Mhaldor|Targossas)\\.$/;\r\n        const mightRegExp = /^(?:He|She|It) is considered to be approximately (\\d+)% of your might\\.$/;\r\n        const mightEqualRegExp = /^(?:He|She) is considered to be approximately equal to your might\\.$/;\r\n        const houseRegExp = /^(?:He|She) is ([\\w\\W]+) in the ([\\w\\W]+)\\.$/;\r\n        const coatOfArmsRegExp = /^(?:He|She) bears the arms: ([\\w\\W]+)\\.$/;\r\n        const divorcesRegExp = /^(?:He|She) has been divorced (?:(\\d+) times|once)\\.$/;\r\n        const mottoRegExp = /^(?:His|Her) motto: '([\\w\\W]+)'$/;\r\n        const warcryRegExp = /^(?:His|Her) warcry: '([\\w\\W]+)'$/;\r\n        const deedsRegExp = /^See HONOURS DEEDS ([A-Z]+) to view (?:his|her) (\\d+) special honours\\.$/;\r\n        const updatedPerson = {\r\n            city: 'cityless',\r\n            honoursed: true\r\n        };\r\n        for (let i = indexOffset; i < current_block.length; i++) {\r\n            const currentLine = current_block[i];\r\n            // Prompt\r\n            if (!('parsed_line' in currentLine)) {\r\n                break;\r\n            }\r\n            const currentText = currentLine.parsed_line.text();\r\n            // Full name, Gender, Race\r\n            if (fullNameGenderRaceRegExp.test(currentText)) {\r\n                const [, fullName, gender, race] = currentText.match(fullNameGenderRaceRegExp) || [];\r\n                updatedPerson.fullName = fullName;\r\n                updatedPerson.gender = gender.toLowerCase();\r\n                updatedPerson.race = race.toLowerCase();\r\n            }\r\n            // Age, Birthday, Birthmonth, Birthyear\r\n            else if (ageRegExp.test(currentText)) {\r\n                const [, age, birthday, birthmonth, birthyear] = currentText.match(ageRegExp) || [];\r\n                updatedPerson.age = Number(age);\r\n                updatedPerson.birthday = Number(birthday);\r\n                updatedPerson.birthmonth = birthmonth.toLowerCase();\r\n                updatedPerson.birthyear = Number(birthyear);\r\n            }\r\n            // Age, Hidden\r\n            else if (ageHiddenRegExp.test(currentText)) {\r\n                if (!updatedPerson.age) {\r\n                    updatedPerson.age = 'hidden';\r\n                }\r\n                if (!updatedPerson.birthday) {\r\n                    updatedPerson.birthday = 'hidden';\r\n                }\r\n                if (!updatedPerson.birthmonth) {\r\n                    updatedPerson.birthmonth = 'hidden';\r\n                }\r\n                if (!updatedPerson.birthyear) {\r\n                    updatedPerson.birthyear = 'hidden';\r\n                }\r\n            }\r\n            // Age, Old\r\n            else if (ageOldRegExp.test(currentText)) {\r\n                updatedPerson.age = 'old';\r\n                updatedPerson.birthday = 'old';\r\n                updatedPerson.birthmonth = 'old';\r\n                updatedPerson.birthyear = 'old';\r\n            }\r\n            // Age, Immortal\r\n            else if (ageImmortalRegExp.test(currentText)) {\r\n                updatedPerson.age = 'immortal';\r\n                updatedPerson.birthday = 'immortal';\r\n                updatedPerson.birthmonth = 'immortal';\r\n                updatedPerson.birthyear = 'immortal';\r\n            }\r\n            // XP Rank\r\n            else if (xpRankRegExp.test(currentText)) {\r\n                const [, xpRank] = currentText.match(xpRankRegExp) || [];\r\n                updatedPerson.xpRank = Number(xpRank);\r\n            }\r\n            // XP Unranked\r\n            else if (xpUnrankedRegExp.test(currentText)) {\r\n                updatedPerson.xpRank = undefined;\r\n            }\r\n            // Combat Rank, Combat Rating\r\n            else if (combatRankRegExp.test(currentText)) {\r\n                const [, combatRank, combatRating] = currentText.match(combatRankRegExp) || [];\r\n                updatedPerson.combatRank = Number(combatRank);\r\n                updatedPerson.combatRating = Number(combatRating);\r\n            }\r\n            // Infamous\r\n            else if (infamousRegExp.test(currentText)) {\r\n                updatedPerson.infamous = true;\r\n            }\r\n            // Not Infamous\r\n            else if (notInfamousRegExp.test(currentText)) {\r\n                updatedPerson.infamous = false;\r\n            }\r\n            // Mark\r\n            else if (markRegExp.test(currentText)) {\r\n                const [, mark] = currentText.match(markRegExp) || [];\r\n                updatedPerson.mark = mark.toLowerCase();\r\n            }\r\n            // Mark Rank\r\n            else if (markRankRegExp.test(currentText)) {\r\n                const [, mark] = currentText.match(markRankRegExp) || [];\r\n                updatedPerson.mark = mark.toLowerCase();\r\n            }\r\n            // City, City Rank\r\n            else if (cityRankRegExp.test(currentText)) {\r\n                const [, cityRank, city] = currentText.match(cityRankRegExp) || [];\r\n                updatedPerson.cityRank = cityRank;\r\n                updatedPerson.city = city.toLowerCase();\r\n            }\r\n            // City, City Army, City Army Rank\r\n            else if (cityArmyRegExp.test(currentText)) {\r\n                const [, cityArmyRank, city] = currentText.match(cityArmyRegExp) || [];\r\n                updatedPerson.cityArmyRank = cityArmyRank;\r\n                updatedPerson.cityArmy = true;\r\n                updatedPerson.city = city.toLowerCase();\r\n            }\r\n            // Might Percent\r\n            else if (mightRegExp.test(currentText)) {\r\n                const [, mightPercent] = currentText.match(mightRegExp) || [];\r\n                updatedPerson.mightPercent = Number(mightPercent);\r\n            }\r\n            // Might Percent Equal\r\n            else if (mightEqualRegExp.test(currentText)) {\r\n                updatedPerson.mightPercent = 100;\r\n            }\r\n            // House, House Rank\r\n            else if (houseRegExp.test(currentText)) {\r\n                const [, houseRank, house] = currentText.match(houseRegExp) || [];\r\n                updatedPerson.houseRank = houseRank;\r\n                updatedPerson.house = house;\r\n            }\r\n            // Coat of Arms\r\n            else if (coatOfArmsRegExp.test(currentText)) {\r\n                const [, coatOfArms] = currentText.match(coatOfArmsRegExp) || [];\r\n                updatedPerson.coatOfArms = coatOfArms;\r\n            }\r\n            // Divorces\r\n            else if (divorcesRegExp.test(currentText)) {\r\n                const [, divorces] = currentText.match(divorcesRegExp) || [];\r\n                updatedPerson.divorces = divorces === undefined ? 1 : Number(divorces);\r\n            }\r\n            // Motto\r\n            else if (mottoRegExp.test(currentText)) {\r\n                const [, motto] = currentText.match(mottoRegExp) || [];\r\n                updatedPerson.motto = motto;\r\n                updatedPerson.warcry = undefined;\r\n            }\r\n            // Warcry\r\n            else if (warcryRegExp.test(currentText)) {\r\n                const [, warcry] = currentText.match(warcryRegExp) || [];\r\n                updatedPerson.motto = undefined;\r\n                updatedPerson.warcry = warcry;\r\n            }\r\n            // Name, Deeds\r\n            else if (deedsRegExp.test(currentText)) {\r\n                const [, name, deeds] = currentText.match(deedsRegExp) || [];\r\n                updatedPerson.name = name.toLowerCase();\r\n                updatedPerson.deeds = Number(deeds);\r\n            }\r\n        }\r\n        let foundPerson = false;\r\n        if (updatedPerson.name) {\r\n            client.peopleManager.updatePerson(updatedPerson.name, updatedPerson);\r\n            foundPerson = true;\r\n        }\r\n        else if (client.peopleManager.honoursName && ((_a = updatedPerson.fullName) === null || _a === void 0 ? void 0 : _a.toLowerCase().indexOf(client.peopleManager.honoursName)) !== -1) {\r\n            client.peopleManager.updatePerson(client.peopleManager.honoursName, updatedPerson);\r\n            if (client.peopleManager.honoursTimerId) {\r\n                clearTimeout(client.peopleManager.honoursTimerId);\r\n                client.peopleManager.honoursName = undefined;\r\n                client.peopleManager.honoursTimerId = undefined;\r\n            }\r\n            foundPerson = true;\r\n        }\r\n        else if (updatedPerson.fullName) {\r\n            const names = [];\r\n            const regExp = /([A-Z][a-z]+)/g;\r\n            let match = null;\r\n            while (match = regExp.exec(updatedPerson.fullName)) {\r\n                names.push(match[1]);\r\n            }\r\n            if (names.length === 1 && names[0]) {\r\n                const name = names[0].toLowerCase();\r\n                client.peopleManager.updatePerson(name, updatedPerson);\r\n                foundPerson = true;\r\n            }\r\n        }\r\n        if (!foundPerson) {\r\n            client.peopleManager.error(`Could not identify person: Full Name: '${updatedPerson.fullName}', Name: '${updatedPerson.name}'`);\r\n        }\r\n    "
                        }
                    ],
                    "name": "Honours",
                    "enabled": true,
                    "id": 6,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^([\\w\\W]+) \\((male|female) ([A-Za-z' ]+)\\)\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "\n    var regExpArray = [\n        /^([\\w\\W]+)$/,\n    /^(?:Plus another (\\d+) whose presence you cannot fully sense)? ?(?:\\(\\d+ total\\))?\\.$/\n    ];\n\n    var indexOffset = current_block.indexOf(current_line);\n    var lastIndex =  indexOffset + regExpArray.length - 1;\n\n    // Override args\n    var args = {\n        matches: [],\n        block: current_block,\n        lines: []\n    };\n\n    var prompt = current_block[current_block.length - 1];\n\n    if (prompt.parsed_prompt) {\n        args.prompt = prompt;\n    }\n\n    for (let i = 0; i < regExpArray.length; i++) {\n        const lineIndex = i + indexOffset;\n\n        if (!current_block[lineIndex] || !current_block[lineIndex].parsed_line) {\n            break;\n        }\n\n        var currentRegExp = regExpArray[i];\n        var currentText = current_block[lineIndex].parsed_line.text();\n\n        if (!currentRegExp.test(currentText)) {\n            break;\n        }\n\n        args.matches.push(currentText.match(currentRegExp));\n        args.lines.push(current_block[lineIndex]);\n\n        if (lineIndex === lastIndex) {\n            const peopleLine = args.lines[0];\r\n        if ('parsed_line' in peopleLine) {\r\n            if (peopleLine.line !== 'None') {\r\n                const regExp = /\\u001b\\[4z<COLOR (#[A-Za-z0-9]+)>\\u001b\\[4z(?:<SEND HREF=\"HONOURS [A-Za-z]+\">)?([A-Za-z]+)\\u001b\\[4z(?:<\\/SEND>)?\\u001b\\[4z<\\/COLOR>(?:, | and |\\.)?/g;\r\n                const people = [];\r\n                let isQWC = false;\r\n                let match = null;\r\n                while (match = regExp.exec(peopleLine.line)) {\r\n                    const name = match[2];\r\n                    if (!name) {\r\n                        continue;\r\n                    }\r\n                    const person = client.peopleManager.getOrCreatePerson(name);\r\n                    person.lastSeen = Date.now();\r\n                    const cityName = match[1] in client.peopleManager.QWCColourToCityDictionary\r\n                        ? client.peopleManager.QWCColourToCityDictionary[match[1]]\r\n                        : undefined;\r\n                    if (cityName) {\r\n                        if (cityName !== 'cityless') {\r\n                            isQWC = true;\r\n                        }\r\n                        person.city = cityName;\r\n                        people.push(person);\r\n                    }\r\n                }\r\n                const cityDictionary = {\r\n                    ashtan: [],\r\n                    cityless: [],\r\n                    cyrene: [],\r\n                    eleusis: [],\r\n                    hashan: [],\r\n                    mhaldor: [],\r\n                    targossas: [],\r\n                    unknown: []\r\n                };\r\n                people.forEach(person => {\r\n                    var _a;\r\n                    if (!isQWC) {\r\n                        delete person.city;\r\n                    }\r\n                    const updatedPerson = client.peopleManager.updatePerson(person.name, person);\r\n                    cityDictionary[(_a = updatedPerson.city) !== null && _a !== void 0 ? _a : 'unknown'].push(updatedPerson);\r\n                });\r\n                const lines = [];\r\n                lines.push(`%lightgray%Quick Who${isQWC ? ` (${client.displayService.rainbowify('Coloured')})` : ''}`);\r\n                lines.push('');\r\n                let tabSize = 0;\r\n                for (const cityName in cityDictionary) {\r\n                    tabSize = Math.max(tabSize, cityName.length);\r\n                }\r\n                for (const cityName in cityDictionary) {\r\n                    const citizens = cityDictionary[cityName];\r\n                    const colouredCityName = `%${client.peopleManager.settings.colourDictionary[cityName]}%${client.peopleManager.displayify(cityName)}%end%`;\r\n                    const tab = `${' '.repeat(tabSize - cityName.length)}`;\r\n                    const colouredCitizens = citizens.map(person => client.peopleManager.getDisplayName(person)).join(', ');\r\n                    const count = citizens.length;\r\n                    lines.push(`${colouredCityName}:${tab} ${colouredCitizens}${count > 0 ? ' ' : ''}(${count})`);\r\n                }\r\n                lines.push('');\r\n                lines.push(`%lightgray%Total:${' '.repeat(tabSize - 5)} ${people.length}`);\r\n                client.displayService.echo(lines);\r\n                args.lines.forEach(line => {\r\n                    if ('parsed_line' in line) {\r\n                        line.gag = true;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    \n        }\n    }\n    "
                        }
                    ],
                    "name": "Quick Who",
                    "enabled": true,
                    "id": 5,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^([\\w\\W]+)$"
                }
            ],
            "actions": [],
            "name": "Triggers",
            "enabled": true,
            "id": 8
        },
        {
            "type": "function",
            "items": [],
            "actions": [],
            "name": "onBlock",
            "enabled": true,
            "id": 9,
            "code": "current_block.forEach(line => {\r\n        if ('parsed_line' in line) {\r\n            let foreGroundColour = 'reset';\r\n            let backGroundColour = '';\r\n            for (let i = 0; i < line.parsed_line.chunks.length; i++) {\r\n                const currentChunk = line.parsed_line.chunks[i];\r\n                switch (currentChunk.type()) {\r\n                    case 'color':\r\n                        if (currentChunk._fg) {\r\n                            foreGroundColour = currentChunk._fg;\r\n                        }\r\n                        if (currentChunk._bg) {\r\n                            backGroundColour = currentChunk._bg;\r\n                        }\r\n                        break;\r\n                    case 'text':\r\n                        {\r\n                            const nameRegExp = /([A-Z][a-z]+)/g;\r\n                            const letterRegExp = /[A-Za-z]/;\r\n                            let text = currentChunk.text();\r\n                            let match = null;\r\n                            while (match = nameRegExp.exec(text)) {\r\n                                const person = client.peopleManager.settings.people[match[1].toLowerCase()];\r\n                                if (person) {\r\n                                    const end = nameRegExp.lastIndex;\r\n                                    const start = end - person.name.length;\r\n                                    if (start - 1 >= 0 && letterRegExp.test(text[start - 1])) {\r\n                                        continue;\r\n                                    }\r\n                                    if (end <= text.length - 1 && letterRegExp.test(text[end])) {\r\n                                        continue;\r\n                                    }\r\n                                    const colour = client.peopleManager.getColour(person);\r\n                                    const name = client.peopleManager.displayify(person.name);\r\n                                    const tag = client.peopleManager.getTag(person);\r\n                                    const isEnemy = client.peopleManager.isEnemy(person);\r\n                                    const enemyColour = client.peopleManager.getEnemyColour(person);\r\n                                    const chunks = [];\r\n                                    chunks.push(linechunk_text(text.slice(0, start)));\r\n                                    if (isEnemy) {\r\n                                        chunks.push(linechunk_color(enemyColour, undefined));\r\n                                        chunks.push(linechunk_text('['));\r\n                                        chunks.push(linechunk_color(foreGroundColour, undefined));\r\n                                        chunks.push(linechunk_color(undefined, backGroundColour));\r\n                                    }\r\n                                    chunks.push(linechunk_mxp_send(colour, [`HONOURS ${name}`], name, `${name}${tag}`, false));\r\n                                    if (isEnemy) {\r\n                                        chunks.push(linechunk_color(enemyColour, undefined));\r\n                                        chunks.push(linechunk_text(']'));\r\n                                        chunks.push(linechunk_color(foreGroundColour, undefined));\r\n                                        chunks.push(linechunk_color(undefined, backGroundColour));\r\n                                    }\r\n                                    chunks.push(linechunk_text(text.slice(end)));\r\n                                    line.parsed_line.chunks.splice(i, 1, ...chunks);\r\n                                    i += chunks.length - 2; // Add length of chunks so we move to the new text chunk we made (the i++ in the for() is added too)\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    });\r\n"
        },
        {
            "type": "function",
            "items": [],
            "actions": [],
            "name": "onLoad",
            "enabled": true,
            "id": 10,
            "code": "class _PeopleManager extends client.systemService.BasePackage {\r\n        constructor(gmcpService) {\r\n            super('People Manager', 'people-manager:settings', {\r\n                enabled: true,\r\n                people: {},\r\n                name: '',\r\n                colourDictionary: {\r\n                    ashtan: '#800080',\r\n                    cyrene: '#008080',\r\n                    eleusis: '#00ff00',\r\n                    hashan: '#808000',\r\n                    mhaldor: '#ff0000',\r\n                    targossas: '#ffffff',\r\n                    cityless: '#c0c0c0',\r\n                    guide: '#ffff00',\r\n                    immortal: '#008000',\r\n                    cityenemy: '#c00000',\r\n                    undefined: '#808080'\r\n                }\r\n            });\r\n            this.gmcpService = gmcpService;\r\n            this.QWCColourToCityDictionary = {\r\n                '#800080': 'ashtan',\r\n                '#008080': 'cyrene',\r\n                '#00ff00': 'eleusis',\r\n                '#808000': 'hashan',\r\n                '#ff0000': 'mhaldor',\r\n                '#ffffff': 'targossas',\r\n                '#c0c0c0': 'cityless'\r\n            };\r\n            this.gmcpService.once(['Char.Status'], args => {\r\n                if (args.gmcp_args.name) {\r\n                    this.settings.name = args.gmcp_args.name.toLowerCase();\r\n                    this.honoursName = this.settings.name;\r\n                    this.systemService.sendCommand(`honours ${this.settings.name}`);\r\n                }\r\n            });\r\n            this.echo('Loaded.');\r\n        }\r\n        get you() {\r\n            return this.settings.people[this.settings.name];\r\n        }\r\n        updatePerson(name, updates) {\r\n            const lowerName = name.toLowerCase();\r\n            const person = this.getOrCreatePerson(lowerName);\r\n            this.systemService.mergeDeep(person, updates, { name: lowerName, lastUpdated: Date.now() });\r\n            this.settings.people[lowerName] = person;\r\n            this.save();\r\n            return person;\r\n        }\r\n        getPerson(name) {\r\n            const lowerName = name.toLowerCase();\r\n            return this.settings.people[lowerName];\r\n        }\r\n        getOrCreatePerson(name) {\r\n            const lowerName = name.toLowerCase();\r\n            return this.systemService.copyDeep(this.getPerson(name) || { name: lowerName, lastUpdated: Date.now() });\r\n        }\r\n        getColour(person) {\r\n            let colour = undefined;\r\n            if (person.name === 'romeo' || person.name === 'juliet') {\r\n                colour = this.settings.colourDictionary['guide'];\r\n            }\r\n            else if (person.race === 'immortal') {\r\n                colour = this.settings.colourDictionary['immortal'];\r\n            }\r\n            else if (person.city) {\r\n                colour = this.settings.colourDictionary[`${person.city}`];\r\n            }\r\n            return colour || this.settings.colourDictionary['undefined'];\r\n        }\r\n        getEnemyColour(person) {\r\n            const you = this.you;\r\n            let colour = undefined;\r\n            if (you && you.city && person.enemyOf && person.enemyOf.some(enemyOf => enemyOf === you.city)) {\r\n                colour = this.settings.colourDictionary['cityenemy'];\r\n            }\r\n            return colour || this.settings.colourDictionary['undefined'];\r\n        }\r\n        setEnemyOf(person, entity) {\r\n            person.enemyOf = person.enemyOf ? person.enemyOf.concat([entity]) : [entity];\r\n            return person;\r\n        }\r\n        removeEnemyOf(person, entity) {\r\n            if (person.enemyOf) {\r\n                const index = person.enemyOf.indexOf(entity);\r\n                if (index !== -1) {\r\n                    person.enemyOf.splice(index, 1);\r\n                }\r\n                if (person.enemyOf.length === 0) {\r\n                    delete person.enemyOf;\r\n                }\r\n            }\r\n            return person;\r\n        }\r\n        isEnemyOf(person, entity) {\r\n            return person.enemyOf ? person.enemyOf.includes(entity) : false;\r\n        }\r\n        isCityEnemy(person) {\r\n            var _a;\r\n            return ((_a = this.you) === null || _a === void 0 ? void 0 : _a.city) ? this.isEnemyOf(person, this.you.city) : false;\r\n        }\r\n        isEnemy(person) {\r\n            return this.isCityEnemy(person);\r\n        }\r\n        displayify(name) {\r\n            const lowerName = name.toLowerCase();\r\n            const displayified = lowerName[0].toUpperCase() + lowerName.slice(1);\r\n            return displayified;\r\n        }\r\n        getDisplayName(person) {\r\n            const name = this.displayify(person.name);\r\n            const colour = this.getColour(person);\r\n            const tag = client.peopleManager.getTag(person);\r\n            const colouredName = `%${colour}%${name}%end%`;\r\n            let result = colouredName;\r\n            if (this.isEnemy(person)) {\r\n                const enemyColour = this.getEnemyColour(person);\r\n                result = `%${enemyColour}%[${result}]%end%`;\r\n            }\r\n            result = `${this.displayService.commandify(result, `HONOURS ${name}`, `${name}${tag}`)}`;\r\n            return result;\r\n        }\r\n        getTag(person) {\r\n            let tag = '';\r\n            if (person === this.you) {\r\n                tag += ` - You`;\r\n            }\r\n            if (person.city) {\r\n                tag += ` - ${this.displayify(person.city)}`;\r\n            }\r\n            if (person.name === 'romeo' || person.name === 'juliet') {\r\n                tag += ` - ${this.displayify('guide')}`;\r\n            }\r\n            if (person.race === 'immortal') {\r\n                tag += ` - ${this.displayify('immortal')}`;\r\n            }\r\n            if (this.isEnemy(person)) {\r\n                tag += ` - ${this.displayify('enemy')}`;\r\n            }\r\n            return tag;\r\n        }\r\n    }\r\n    client.peopleManager = new _PeopleManager(client.gmcpService);\r\n"
        }
    ],
    "actions": [],
    "name": "People Manager",
    "enabled": true,
    "id": 1,
    "description": "A People Manager"
}