{
    "type": "group",
    "items": [
        {
            "type": "function",
            "items": [],
            "actions": [],
            "name": "onLoad",
            "enabled": true,
            "id": 2,
            "code": "(function () {\n    client.huntingmanager = {\n        active: false,\n        settings: get_variable('hunting-manager:settings') || {\n            enabled: true,\n            areas: {},\n            attackCommand: 'kill',\n            warnAtPercent: 30,\n            shieldAtPercent: 20,\n            autoShield: false,\n            fleeAtPercent: 10,\n            autoFlee: false\n        },\n        target: {\n            callTargets: false,\n            setTarget(targetOrIdOrUndefined) {\n                const target = typeof targetOrIdOrUndefined === 'number' ? client.huntingmanager.target.findTargetById(targetOrIdOrUndefined) : targetOrIdOrUndefined;\n                if (client.huntingmanager.target.currentTarget && target && client.huntingmanager.target.currentTarget.id === target.id) {\n                    client.huntingmanager.target.currentTarget = target;\n                    return;\n                }\n                if (!target) {\n                    client.huntingmanager.stop();\n                    return;\n                }\n                client.huntingmanager.target.currentTarget = target;\n                client.huntingmanager.addMob(client.gmcpservice.room.area, client.huntingmanager.target.currentTarget.name);\n                if (client.huntingmanager.target.callTargets) {\n                    client.systemservice.sendCommand(`pt Target: ${client.huntingmanager.target.currentTarget.id}`);\n                }\n                GMCP.Target = client.huntingmanager.target.currentTarget.id;\n                set_variable('tar', client.huntingmanager.target.currentTarget.id);\n                set_current_target_info(client.huntingmanager.target.currentTarget.name, '100%', undefined);\n                send_GMCP('IRE.Target.Set', client.huntingmanager.target.currentTarget.id);\n                client.huntingmanager.echo(`Targetting %lightgray%${client.huntingmanager.target.currentTarget.name}%end% (%lightgray%${client.huntingmanager.target.currentTarget.id}%end%).`);\n            },\n            setTargetCaller(targetCallerName) {\n                if (!targetCallerName || targetCallerName === 'clear' || targetCallerName === 'none') {\n                    const wasCallingTarget = client.huntingmanager.target.callTargets;\n                    client.huntingmanager.target.targetCallerName = undefined;\n                    client.huntingmanager.target.callTargets = false;\n                    if (wasCallingTarget) {\n                        client.huntingmanager.echo(`%lightgray%We%end% are no longer calling targets.`);\n                    }\n                    else if (client.huntingmanager.target.targetCallerName) {\n                        client.huntingmanager.echo(`No longer following target calls from '%lightgray%${client.huntingmanager.target.targetCallerName}%end%'.`);\n                    }\n                }\n                else if (targetCallerName.toLowerCase() === 'me') {\n                    client.huntingmanager.target.targetCallerName = undefined;\n                    client.huntingmanager.target.callTargets = true;\n                    client.systemservice.sendCommand(`pt I am now calling targets.`);\n                    client.huntingmanager.echo(`%lightgray%We%end% are now calling targets.`);\n                }\n                else {\n                    client.huntingmanager.target.targetCallerName = targetCallerName;\n                    client.huntingmanager.target.callTargets = false;\n                    client.huntingmanager.echo(`Now following target calls from '%lightgray%${client.huntingmanager.target.targetCallerName}%end%'.`);\n                }\n            },\n            findTargetById(id) {\n                const area = client.huntingmanager.settings.areas[client.gmcpservice.room.area];\n                if (!area) {\n                    return undefined;\n                }\n                const target = client.gmcpservice.items.room.find(item => { var _a; return ((_a = item.attrib) === null || _a === void 0 ? void 0 : _a.includes('m')) && item.id === id.toString(); });\n                return target;\n            },\n            findPriorityTarget() {\n                const area = client.huntingmanager.settings.areas[client.gmcpservice.room.area];\n                if (!area) {\n                    return;\n                }\n                const roomMobs = client.gmcpservice.items.room.filter(item => { var _a; return (_a = item.attrib) === null || _a === void 0 ? void 0 : _a.includes('m'); });\n                for (const areaMobName of area.mobs) {\n                    for (const roomMob of roomMobs) {\n                        if (roomMob.name === areaMobName) {\n                            return roomMob;\n                        }\n                    }\n                }\n                return undefined;\n            },\n            tryTargetPriority() {\n                if (client.huntingmanager.target.targetCallerName) {\n                    client.huntingmanager.stop();\n                }\n                else {\n                    client.huntingmanager.target.setTarget(client.huntingmanager.target.findPriorityTarget());\n                }\n            }\n        },\n        attack: {\n            setAttackCommand(command) {\n                client.huntingmanager.settings.attackCommand = command;\n                client.huntingmanager.save();\n                client.huntingmanager.echo(`Will now attack using '%lightgray%${client.huntingmanager.settings.attackCommand}%end%'.`);\n            },\n            attackTarget() {\n                if (!client.huntingmanager.target.currentTarget) {\n                    client.huntingmanager.error('Cannot attack. No target set.');\n                    client.huntingmanager.stop();\n                    return;\n                }\n                client.queuemanager.appendCommand('stand', 'equilibriumBalance');\n                client.queuemanager.appendCommand(client.huntingmanager.settings.attackCommand, 'equilibriumBalance', 'equilibriumBalance');\n                client.huntingmanager.echo(`Attacking %lightgray%${client.huntingmanager.target.currentTarget.name}%end% (%lightgray%${client.huntingmanager.target.currentTarget.id}%end%)`);\n            },\n            tryAttackTarget() {\n                if (client.huntingmanager.target.currentTarget) {\n                    const attackCommand = client.huntingmanager.settings.attackCommand.toLowerCase();\n                    const index = client.queuemanager.equilibriumBalance.queue.findIndex(command => {\n                        command.command.toLowerCase() === attackCommand;\n                    });\n                    if (index === -1) {\n                        client.huntingmanager.attack.attackTarget();\n                    }\n                }\n            }\n        },\n        raze: {\n            setRazeCommand(command) {\n                client.huntingmanager.settings.razeCommand = command;\n                client.huntingmanager.save();\n                client.huntingmanager.echo(`Will now raze using '%lightgray%${client.huntingmanager.settings.razeCommand}%end%'.`);\n            },\n            razeTarget() {\n                if (!client.huntingmanager.settings.razeCommand) {\n                    client.huntingmanager.error('Cannot raze. No raze command set.');\n                    return;\n                }\n                if (!client.huntingmanager.target.currentTarget) {\n                    client.huntingmanager.error('Cannot raze. No target set.');\n                    client.huntingmanager.stop();\n                    return;\n                }\n                client.queuemanager.clearQueue('equilibriumBalance');\n                client.queuemanager.appendCommand('stand', 'equilibriumBalance');\n                client.queuemanager.appendCommand(client.huntingmanager.settings.razeCommand, 'equilibriumBalance', 'equilibriumBalance');\n                client.queuemanager.appendCommand('stand', 'equilibriumBalance');\n                client.queuemanager.appendCommand(client.huntingmanager.settings.attackCommand, 'equilibriumBalance', 'equilibriumBalance');\n                client.huntingmanager.echo(`Razing %lightgray%${client.huntingmanager.target.currentTarget.name}%end% (%lightgray%${client.huntingmanager.target.currentTarget.id}%end%)`);\n            },\n            tryRazeTarget() {\n                if (client.huntingmanager.settings.razeCommand && client.huntingmanager.target.currentTarget) {\n                    const razeCommand = client.huntingmanager.settings.razeCommand.toLowerCase();\n                    const index = client.queuemanager.equilibriumBalance.queue.findIndex(command => {\n                        command.command.toLowerCase() === razeCommand;\n                    });\n                    if (index === -1) {\n                        client.huntingmanager.raze.razeTarget();\n                    }\n                }\n            }\n        },\n        warn: {\n            setWarnAtPercent(percent) {\n                client.huntingmanager.settings.warnAtPercent = percent;\n                client.huntingmanager.save();\n                client.huntingmanager.echo(`Will now warn below '%lightgray%${client.huntingmanager.settings.warnAtPercent}%%end%'.`);\n            }\n        },\n        shield: {\n            setShieldCommand(command) {\n                client.huntingmanager.settings.shieldCommand = command;\n                client.huntingmanager.save();\n                client.huntingmanager.echo(`Will now shield using '%lightgray%${client.huntingmanager.settings.shieldCommand}%end%'.`);\n            },\n            setShieldAtPercent(percent) {\n                client.huntingmanager.settings.shieldAtPercent = percent;\n                client.huntingmanager.save();\n                client.huntingmanager.echo(`Will now attempt to shield below '%lightgray%${client.huntingmanager.settings.shieldAtPercent}%%end%'.`);\n            },\n            shield() {\n                if (!client.huntingmanager.settings.shieldCommand) {\n                    client.huntingmanager.error('Cannot shield. No shield command set.');\n                    return;\n                }\n                client.queuemanager.appendCommand('stand', 'equilibriumBalance');\n                client.queuemanager.appendCommand(client.huntingmanager.settings.shieldCommand, 'equilibriumBalance', 'equilibriumBalance');\n                client.huntingmanager.echo(`Shielding.`);\n            },\n            tryShield() {\n                if (client.huntingmanager.settings.shieldCommand) {\n                    const shieldCommand = client.huntingmanager.settings.shieldCommand.toLowerCase();\n                    const index = client.queuemanager.equilibriumBalance.queue.findIndex(command => {\n                        command.command.toLowerCase() === shieldCommand;\n                    });\n                    if (index === -1) {\n                        client.huntingmanager.shield.shield();\n                    }\n                }\n            }\n        },\n        flee: {\n            setFleeAtPercent(percent) {\n                client.huntingmanager.settings.fleeAtPercent = percent;\n                client.huntingmanager.save();\n                client.huntingmanager.echo(`Will now attempt to flee below '%lightgray%${client.huntingmanager.settings.fleeAtPercent}%%end%'.`);\n            },\n            flee() {\n            },\n            tryFlee() {\n            }\n        },\n        echo(text) {\n            client.displayservice.echo(`%lightgray%[%deepskyblue%Hunting Manager%end%]:%end% ${text}`);\n        },\n        error(text) {\n            client.huntingmanager.echo(`%red%${text}`);\n        },\n        save() {\n            client.systemservice.save('hunting-manager', () => {\n                set_variable('hunting-manager:settings', client.huntingmanager.settings);\n                client.huntingmanager.echo('Settings saved.');\n            });\n        },\n        addArea(areaName) {\n            let area = client.huntingmanager.settings.areas[areaName];\n            if (area) {\n                return area;\n            }\n            area = {\n                name: areaName,\n                mobs: []\n            };\n            client.huntingmanager.settings.areas[areaName] = area;\n            client.huntingmanager.echo(`Added new area: '%lightgray%${areaName}%end%'.`);\n            client.huntingmanager.save();\n            return area;\n        },\n        showArea(areaName) {\n            let area = client.huntingmanager.settings.areas[areaName];\n            if (!area) {\n                client.huntingmanager.error(`Unknown area '%lightgray%${areaName}%end%'.`);\n                return;\n            }\n            client.displayservice.table(`Area Mob Priorities: ${area.name}`, [\n                {\n                    title: undefined,\n                    columns: 1,\n                    items: area.mobs.map((mobName, index) => {\n                        return {\n                            label: makeClickableIndex(area, mobName, index),\n                            value: mobName\n                        };\n                    })\n                }\n            ]);\n            function makeClickableIndex(area, mobName, index) {\n                let result = '';\n                if (index === 0) {\n                    result += ' ';\n                }\n                else {\n                    result += client.displayservice.commandify(client.displayservice.colorify('%green%^'), `hunting-manager move mob ${mobName} ${index - 1}`, 'Move up');\n                }\n                if (index >= area.mobs.length - 1) {\n                    result += '  ';\n                }\n                else {\n                    result += ' ';\n                    result += client.displayservice.clickify(client.displayservice.colorify('%red%v'), `client.huntingmanager.moveMob('${area.name}', '${mobName}', ${index + 1});`, 'Move down');\n                }\n                result += ` ${index}`;\n                return result;\n            }\n        },\n        addMob(areaName, mobName) {\n            let area = client.huntingmanager.settings.areas[areaName];\n            if (!area) {\n                area = client.huntingmanager.addArea(areaName);\n            }\n            if (area.mobs.includes(mobName)) {\n                return;\n            }\n            area.mobs.push(mobName);\n            client.huntingmanager.echo(`Added new mob '%lightgray%${mobName}%end%' to area '%lightgray%${areaName}%end%'.`);\n            client.huntingmanager.save();\n        },\n        removeMob(areaName, mobName) {\n            const area = client.huntingmanager.settings.areas[areaName];\n            if (!area) {\n                client.huntingmanager.error(`Unknown area '%lightgray%${areaName}%end%'.`);\n                return;\n            }\n            const index = area.mobs.findIndex(value => value === mobName);\n            if (!area.mobs.includes(mobName) || index === -1) {\n                client.huntingmanager.error(`Unknown mob '%lightgray%${mobName}%end%' in area '%lightgray%${areaName}%end%'.`);\n                return;\n            }\n            area.mobs.splice(index, 1);\n            client.huntingmanager.echo(`Removed mob '%lightgray%${mobName}%end%' from area '%lightgray%${areaName}%end%'.`);\n            client.huntingmanager.save();\n        },\n        moveMob(areaName, mobName, index) {\n            const area = client.huntingmanager.settings.areas[areaName];\n            if (!area) {\n                client.huntingmanager.error(`Unknown area '%lightgray%${areaName}%end%'.`);\n                return;\n            }\n            const currentIndex = area.mobs.findIndex(value => value === mobName);\n            if (!area.mobs.includes(mobName) || currentIndex === -1) {\n                client.huntingmanager.error(`Unknown mob '%lightgray%${areaName}%end%' in area '%lightgray%${areaName}%end%'.`);\n                return;\n            }\n            if (index > area.mobs.length - 1 || index < 0) {\n                client.huntingmanager.error(`Index '%lightgray%${areaName}%end%' must be between '%lightgray%0%end%' and '%lightgray%${area.mobs.length - 1}%end%'.`);\n                return;\n            }\n            area.mobs.splice(currentIndex, 1);\n            area.mobs.splice(index, 0, mobName);\n            client.huntingmanager.echo(`Moved mob '%lightgray%${mobName}%end%' in area '%lightgray%${areaName}%end%' from '%lightgray%${currentIndex}%end%' to '%lightgray%${index}%end%'.`);\n            client.huntingmanager.showArea(area.name);\n            client.huntingmanager.save();\n        },\n        start() {\n            if (client.huntingmanager.active) {\n                return;\n            }\n            if (!client.huntingmanager.target.targetCallerName) {\n                client.huntingmanager.target.tryTargetPriority();\n            }\n            if (client.huntingmanager.target.currentTarget) {\n                client.huntingmanager.active = true;\n                client.huntingmanager.attack.tryAttackTarget();\n                client.huntingmanager.echo('Started hunting.');\n            }\n            else {\n                client.huntingmanager.error('Cannot start hunting. No targets found.');\n            }\n        },\n        stop() {\n            if (!client.huntingmanager.active) {\n                return;\n            }\n            client.huntingmanager.target.currentTarget = undefined;\n            setTimeout(() => {\n                client.huntingmanager.active = false;\n            });\n            // client.queuemanager.balanceQueue.forEach((value, index) => {\n            //     if (value.toLowerCase().startsWith('huntingmanager')) {\n            //         client.systemservice.sendCommand(`queue remove bal ${index + 1}`);\n            //     }\n            // });\n            // client.queuemanager.equilibriumQueue.forEach((value, index) => {\n            //     if (value.toLowerCase().startsWith('huntingmanager')) {\n            //         client.systemservice.sendCommand(`queue remove eq ${index + 1}`);\n            //     }\n            // });\n            // client.queuemanager.equilibriumBalanceQueue.forEach((value, index) => {\n            //     if (value.toLowerCase().startsWith('huntingmanager')) {\n            //         client.systemservice.sendCommand(`queue remove eqbal ${index + 1}`);\n            //     }\n            // });\n            client.huntingmanager.echo('Stopped hunting.');\n        }\n    };\n    client.gmcpservice.subscribe(['Char.Items.List', 'Char.Items.Remove'], args => {\n        if (client.huntingmanager.settings.enabled && client.huntingmanager.active) {\n            if (args.gmcp_args.location === 'room') {\n                if (args.gmcp_method === 'Char.Items.List') {\n                    const currentTarget = client.huntingmanager.target.currentTarget;\n                    if (currentTarget) {\n                        const mob = args.gmcp_args.items.find(value => value.id === currentTarget.id);\n                        if (!mob) {\n                            client.huntingmanager.target.tryTargetPriority();\n                        }\n                    }\n                }\n                else {\n                    if (client.huntingmanager.target.currentTarget) {\n                        const mob = args.gmcp_args.item;\n                        if (client.huntingmanager.target.currentTarget.id === mob.id) {\n                            client.huntingmanager.target.tryTargetPriority();\n                        }\n                    }\n                }\n            }\n        }\n    });\n    // client.gmcpservice.subscribe(['IRE.Target.Set'], args => {\n    //     if (client.huntingmanager.settings.enabled && client.huntingmanager.active) {\n    //         if (!args.gmcp_args) {\n    //             client.huntingmanager.target.tryTargetPriority();\n    //             return;\n    //         }\n    //     }\n    // });\n    client.gmcpservice.subscribe(['Room.Info'], () => {\n        if (client.huntingmanager.settings.enabled && client.huntingmanager.active) {\n            if (client.gmcpservice.previousRoom.num !== client.gmcpservice.room.num) {\n                client.huntingmanager.stop();\n            }\n        }\n    });\n    client.gmcpservice.subscribe(['Char.Vitals'], args => {\n        if (client.huntingmanager.active) {\n            const hp = Number(args.gmcp_args.hp);\n            const maxhp = Number(args.gmcp_args.maxhp);\n            const percent = hp / maxhp * 100;\n            const percentText = Math.ceil(percent);\n            if (client.huntingmanager.settings.fleeAtPercent && percent <= client.huntingmanager.settings.fleeAtPercent) {\n                if (client.huntingmanager.settings.autoFlee) {\n                    client.huntingmanager.flee.tryFlee();\n                    client.huntingmanager.echo(`%red% ! FLEEING ! %end% You are below %red%${percentText}%%end% health! %red% ! FLEEING ! %end%`);\n                }\n                else {\n                    client.huntingmanager.echo(`%red% ! FLEE ! %end% You are below %red%${percentText}%%end% health! %red% ! FLEE ! %end%`);\n                }\n            }\n            else if (client.huntingmanager.settings.shieldAtPercent && percent <= client.huntingmanager.settings.shieldAtPercent) {\n                if (client.huntingmanager.settings.autoShield) {\n                    client.huntingmanager.shield.tryShield();\n                    client.huntingmanager.echo(`%orange% ! SHIELDING ! %end% You are below %orange%${percentText}%%end% health! %orange% ! SHIELDING ! %end%`);\n                }\n                else {\n                    client.huntingmanager.echo(`%orange% ! SHIELD ! %end% You are below %orange%${percentText}%%end% health! %orange% ! SHIELD ! %end%`);\n                }\n            }\n            else if (client.huntingmanager.settings.warnAtPercent && percent <= client.huntingmanager.settings.warnAtPercent) {\n                client.huntingmanager.echo(`%yellow% ! WARNING ! %end% You are below %yellow%${percentText}%%end% health! %yellow% ! WARNING ! %end%`);\n            }\n        }\n    });\n    client.queuemanager.subscribe(['balance', 'equilibrium', 'equilibriumBalance'], (_queue, method, args) => {\n        if (client.huntingmanager.active) {\n            if (method === 'run') {\n                const commands = args.commands.map(value => value.command.toLowerCase());\n                if (commands.includes(client.huntingmanager.settings.attackCommand)) {\n                    client.huntingmanager.attack.tryAttackTarget();\n                }\n            }\n        }\n    });\n    client.huntingmanager.echo('Loaded.');\n})(args);"
        },
        {
            "type": "group",
            "items": [
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        if (client.huntingmanager.settings.enabled) {\n            const mob = args[1];\n            client.huntingmanager.addMob(client.gmcpservice.room.area, mob);\n        }\n    })(args);"
                        }
                    ],
                    "name": "Hunting Manager Add Mob",
                    "enabled": true,
                    "id": 3,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:hm|hunting\\-manager|hunting manager) add(?: ?mob)? ([\\w\\W]+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        if (client.huntingmanager.settings.enabled) {\n            const mob = args[1];\n            const index = Number(args[2]);\n            client.huntingmanager.moveMob(client.gmcpservice.room.area, mob, index);\n        }\n    })(args);"
                        }
                    ],
                    "name": "Hunting Manager Move Mob",
                    "enabled": true,
                    "id": 14,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:hm|hunting\\-manager|hunting manager) move(?: ?mob)? ([\\w\\W]+) (\\d+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        if (client.huntingmanager.settings.enabled) {\n            const mob = args[1];\n            client.huntingmanager.removeMob(client.gmcpservice.room.area, mob);\n        }\n    })(args);"
                        }
                    ],
                    "name": "Hunting Manager Remove Mob",
                    "enabled": true,
                    "id": 13,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:hm|hunting\\-manager|hunting manager) remove(?: ?mob)? ([\\w\\W]+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        if (client.huntingmanager.settings.enabled) {\n            const command = args[1];\n            client.huntingmanager.attack.setAttackCommand(command);\n        }\n    })(args);"
                        }
                    ],
                    "name": "Hunting Manager Set Attack Command",
                    "enabled": true,
                    "id": 4,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:hm|hunting\\-manager|hunting manager)(?: set)? attack ?command ([\\w\\W]+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        if (client.huntingmanager.settings.enabled) {\n            const percent = Number(args[1]);\n            client.huntingmanager.flee.setFleeAtPercent(percent);\n        }\n    })(args);"
                        }
                    ],
                    "name": "Hunting Manager Set Flee At Percent",
                    "enabled": true,
                    "id": 5,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:hm|hunting\\-manager|hunting manager)(?: set)? flee ?at(?: ?percent)? (\\d+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        if (client.huntingmanager.settings.enabled) {\n            const command = args[1];\n            client.huntingmanager.raze.setRazeCommand(command);\n        }\n    })(args);"
                        }
                    ],
                    "name": "Hunting Manager Set Raze Command",
                    "enabled": true,
                    "id": 6,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:hm|hunting\\-manager|hunting manager)(?: set)? raze ?command ([\\w\\W]+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        if (client.huntingmanager.settings.enabled) {\n            const percent = Number(args[1]);\n            client.huntingmanager.shield.setShieldAtPercent(percent);\n        }\n    })(args);"
                        }
                    ],
                    "name": "Hunting Manager Set Shield At Percent",
                    "enabled": true,
                    "id": 7,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:hm|hunting\\-manager|hunting manager)(?: set)? shield ?at(?: ?percent)? (\\d+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        if (client.huntingmanager.settings.enabled) {\n            const command = args[1];\n            client.huntingmanager.shield.setShieldCommand(command);\n        }\n    })(args);"
                        }
                    ],
                    "name": "Hunting Manager Set Shield Command",
                    "enabled": true,
                    "id": 8,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:hm|hunting\\-manager|hunting manager)(?: set)? shield ?command ([\\w\\W]+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        if (client.huntingmanager.settings.enabled) {\n            const targetCallerName = args[1];\n            client.huntingmanager.target.setTargetCaller(targetCallerName);\n        }\n    })(args);"
                        }
                    ],
                    "name": "Hunting Manager Set Target Caller",
                    "enabled": true,
                    "id": 16,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:hm|hunting\\-manager|hunting manager) set(?: ?target)? ?caller ([\\w\\W]+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        if (client.huntingmanager.settings.enabled) {\n            const percent = Number(args[1]);\n            client.huntingmanager.warn.setWarnAtPercent(percent);\n        }\n    })(args);"
                        }
                    ],
                    "name": "Hunting Manager Set Warn At Percent",
                    "enabled": true,
                    "id": 9,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:hm|hunting\\-manager|hunting manager)(?: set)? warn ?at(?: ?percent)? (\\d+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function () {\n        if (client.huntingmanager.settings.enabled) {\n            client.huntingmanager.showArea(client.gmcpservice.room.area);\n        }\n    })(args);"
                        }
                    ],
                    "name": "Hunting Manager Show Area",
                    "enabled": true,
                    "id": 15,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:hm|hunting\\-manager|hunting manager) show ?area$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function () {\n        if (client.huntingmanager.settings.enabled) {\n            client.huntingmanager.start();\n        }\n    })(args);"
                        }
                    ],
                    "name": "Hunting Manager Start",
                    "enabled": true,
                    "id": 10,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:hm|hunting\\-manager|hunting manager) start$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function () {\n        if (client.huntingmanager.settings.enabled) {\n            client.huntingmanager.stop();\n        }\n    })(args);"
                        }
                    ],
                    "name": "Hunting Manager Stop",
                    "enabled": true,
                    "id": 11,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:hm|hunting\\-manager|hunting manager) stop$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        if (client.huntingmanager.settings.enabled) {\n            const levelExperiences = [\n                0, 5000, 10500, 20550, 35205,\n                50525, 70577, 95043, 122000, 152000,\n                185000, 225000, 267000, 312000, 359000,\n                407000, 456000, 506000, 561000, 621000,\n                691000, 761000, 836000, 916000, 1001000,\n                1091000, 1186000, 1286000, 1391000, 1501000,\n                1616000, 1736000, 1861000, 1986000, 2116000,\n                2251000, 2391000, 2536000, 2686000, 2941000,\n                3096000, 3256000, 3416000, 3581000, 3746000,\n                3916000, 4150000, 4353395, 4794382, 5279468,\n                5813062, 6400016, 7045665, 7755879, 8537115,\n                9396474, 10341769, 11381594, 12525401, 13783589,\n                15167596, 16690004, 18364653, 20206766, 22233091,\n                24462048, 26913901, 29610939, 32576939, 35840356,\n                39430114, 43378848, 47722456, 52500425, 60000000,\n                70000000, 83000000, 100000000, 120000000, 150000000,\n                185000000, 225000000, 270000000, 320000000, 375000000,\n                435000000, 500000000, 570000000, 645000000, 725000000,\n                810000000, 900000000, 995000000, 1095000000, 1200000000,\n                1310000000, 1425000000, 1545000000, 1670000000, 2000000000,\n                2346500000, 2710325000, 3092341200, 3493458200, 3914631000,\n                4356862400, 4821205300, 5308765300, 5820703300, 6358238200,\n                6922649800, 7515281900, 8137545600, 8790922400, 9476968000,\n                10197315800, 10953680900, 11747864200, 12581756600, 13457343600,\n                14376709900, 15342044500, 16355645800, 17419927100, 18537422400,\n                19710792400, 20942830900, 22236471300, 23594793700, 25021032200,\n                26518582600, 28091010500, 29742059700, 31475661300, 33295942900,\n                35207238500, 37214098800, 39321302100, 41533865500, 43857057000,\n                46296408000, 48857726500, 51547110900, 54370964500, 57336010700,\n                60449309200, 63718272600, 67150684100, 70754716100, 74538949700,\n                78512394900, 82684512300, 87065235500, 91664994800, 96494742000,\n                101565976500, 106890772700, 112481808700, 118352396500, 124516513600,\n                130988836500, 137784775500, 144920511400, 152413034000, 160280182700,\n                168540688800, 177214220200, 186321428100, 195883996300, 205924692900,\n                216467424000, 227537292000, 239160653000, 251365182000, 264179938000,\n                277635431000, 291763699000, 306598380000, 322174795000, 338530031000,\n                355703029000, 373734676000, 392667906000, 412547797000, 433421683000,\n                455339262000, 478352721000, 502516853000, 527889191000, 554530146000,\n                582503149000, 611874801000, 642715037000, 675097284000, 709098643000,\n                744800071000, 782286569000, 821647393000, 862976257000, 906371565000,\n            ];\n            const from = Number(args[1]);\n            const to = Number(args[2]);\n            const percent = percentageTo(from, to);\n            client.huntingmanager.echo(`Percent from level '%lightgray%${from}%end%' to level '%lightgray%${to}%end%' is '%lightgray%${percent}%%end%'.`);\n            function getExperience(level) {\n                const levelInteger = Math.floor(level);\n                const percent = level % 1;\n                let toNextLevel = (levelExperiences[levelInteger + 1] - levelExperiences[levelInteger]);\n                return levelExperiences[levelInteger] + (toNextLevel * percent);\n            }\n            function percentageTo(from, to) {\n                let x = getExperience(from) / getExperience(to) * 100;\n                x = Math.floor(x * 100 + 0.5) / 100;\n                return x;\n            }\n        }\n    })(args);"
                        }
                    ],
                    "name": "Percent to Level",
                    "enabled": true,
                    "id": 12,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:ptl|percent-to-level|percent to level) ([\\d\\.]+) ([\\d\\.]+)$"
                }
            ],
            "actions": [],
            "name": "Aliases",
            "enabled": true,
            "id": 17
        },
        {
            "type": "group",
            "items": [
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function () {\n        if (client.huntingmanager.settings.enabled && client.huntingmanager.active) {\n            client.huntingmanager.error(`Cannot hunt while graced.`);\n            client.huntingmanager.stop();\n        }\n    })(args);"
                        }
                    ],
                    "name": "Grace",
                    "enabled": true,
                    "id": 22,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^You currently walk in Divine Grace and may neither be harmed nor harm another\\. To leave this state of protection, you must RENOUNCE GRACE\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        if (client.huntingmanager.settings.enabled && client.huntingmanager.active) {\n            if (client.huntingmanager.target.currentTarget && client.huntingmanager.target.currentTarget.name === args[1]) {\n                client.huntingmanager.raze.tryRazeTarget();\n            }\n        }\n    })(args);"
                        }
                    ],
                    "name": "Hit Mob Shield",
                    "enabled": true,
                    "id": 19,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^A dizzying beam of energy strikes you as your attack rebounds off of ([\\w\\W]+)'s shield\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        if (client.huntingmanager.settings.enabled) {\n            client.huntingmanager.addMob(client.gmcpservice.room.area, args[1]);\n        }\n    })(args);"
                        }
                    ],
                    "name": "Killed Mob",
                    "enabled": true,
                    "id": 18,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^You have slain ([\\w\\W]+), retrieving the corpse\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        if (client.huntingmanager.settings.enabled && client.huntingmanager.active) {\n            if (client.huntingmanager.target.currentTarget && client.huntingmanager.target.currentTarget.name === args[1]) {\n                client.huntingmanager.raze.tryRazeTarget();\n            }\n        }\n    })(args);"
                        }
                    ],
                    "name": "Mob Shielded",
                    "enabled": true,
                    "id": 20,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^A nearly invisible magical shield forms around ([\\w\\W]+)\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function () {\n        if (client.huntingmanager.settings.enabled && client.huntingmanager.active) {\n            gag_current_line();\n        }\n    })(args);"
                        }
                    ],
                    "name": "Not Prone",
                    "enabled": true,
                    "id": 21,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^You are not fallen or kneeling\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        if (client.huntingmanager.settings.enabled) {\n            const person = args[1].toLowerCase();\n            if (client.huntingmanager.target.targetCallerName === person) {\n                const targetId = Number(args[2]);\n                client.huntingmanager.target.setTarget(targetId);\n            }\n        }\n    })(args);"
                        }
                    ],
                    "name": "Target Called",
                    "enabled": true,
                    "id": 23,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^\\(Party\\): (\\w+) says, \"Target:? (\\d+)\\.\"$"
                }
            ],
            "actions": [],
            "name": "Triggers",
            "enabled": true,
            "id": 24
        }
    ],
    "actions": [],
    "name": "Hunting Manager",
    "enabled": true,
    "id": 1,
    "description": "A Hunting Manager"
}