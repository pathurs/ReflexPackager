{
    "type": "group",
    "items": [
        {
            "type": "function",
            "items": [],
            "actions": [],
            "name": "onLoad",
            "enabled": true,
            "id": 2,
            "code": "(function () {\n    let timeoutId;\n    let callbacks = {};\n    client.systemService = {\n        enabled: true,\n        lastSavedAt: 0,\n        echo(text) {\n            client.displayService.echo(`%lightgray%[%deepskyblue%System Service%end%]:%end% ${text}`);\n        },\n        error(text) {\n            client.systemService.echo(`%red%${text}%end%`);\n        },\n        save(newCallbackId, newCallback) {\n            if (newCallbackId && newCallback) {\n                callbacks[newCallbackId] = newCallback;\n            }\n            if (timeoutId) {\n                return;\n            }\n            // For example: 30s - 60s = -30s so it will then be saved instantly.\n            const timeoutMilliseconds = Math.max(30000 - (Date.now() - client.systemService.lastSavedAt), 0);\n            timeoutId = window.setTimeout(() => {\n                for (let id in callbacks) {\n                    callbacks[id]();\n                }\n                callbacks = {};\n                gmcp_save_system();\n                client.systemService.lastSavedAt = Date.now();\n                client.systemService.echo('Settings saved.');\n                timeoutId = undefined;\n            }, timeoutMilliseconds);\n        },\n        mergeDeep(target, ...sources) {\n            if (!sources.length) {\n                return target;\n            }\n            ;\n            const source = sources.shift();\n            if (isObject(target) && isObject(source)) {\n                for (const key in source) {\n                    if (isObject(source[key])) {\n                        if (!target[key]) {\n                            Object.assign(target, { [key]: {} });\n                        }\n                        client.systemService.mergeDeep(target[key], source[key]);\n                    }\n                    else {\n                        Object.assign(target, { [key]: source[key] });\n                    }\n                }\n            }\n            return client.systemService.mergeDeep(target, ...sources);\n        },\n        defaultsDeep(target, ...sources) {\n            return client.systemService.mergeDeep({}, ...[...sources, target || {}]);\n        },\n        sendCommand(command, echo = false) {\n            ws_send(command + '\\r\\n');\n            if (echo) {\n                display_notice(command);\n            }\n        },\n        sendCommands(commands, echo = false) {\n            commands.forEach(command => {\n                client.systemService.sendCommand(command, echo);\n            });\n        }\n    };\n    function isObject(object) {\n        return object !== undefined && typeof object === 'object' && !Array.isArray(object);\n    }\n    client.systemService.echo('Loaded.');\n})(args);"
        }
    ],
    "actions": [],
    "name": "System Service",
    "enabled": true,
    "id": 1,
    "description": "A System Service"
}