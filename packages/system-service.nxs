{
    "type": "group",
    "items": [
        {
            "type": "function",
            "items": [],
            "actions": [],
            "name": "onLoad",
            "enabled": true,
            "id": 2,
            "code": "class _BasePackage {\r\n        constructor(name, settingsId, settings) {\r\n            this.name = name;\r\n            this.settingsId = settingsId;\r\n            this.displayService = client.displayService;\r\n            this.systemService = client.systemService;\r\n            this.settings = new Proxy(this.systemService.defaultsDeep(get_variable(this.settingsId), settings), {\r\n                set: (target, property, value) => {\r\n                    target[property] = value;\r\n                    this.save();\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n        echo(text) {\r\n            this.displayService.echo(`%lightgray%[%deepskyblue%${this.name}%end%]:%end% ${text}`);\r\n        }\r\n        error(text) {\r\n            this.systemService.echo(`%red%${text}%end%`);\r\n        }\r\n        save() {\r\n            this.systemService.save(this.name, () => {\r\n                set_variable(this.settingsId, this.settings);\r\n                this.echo('Settings saved.');\r\n            });\r\n        }\r\n    }\r\n    class _SystemService {\r\n        constructor(settings, displayService) {\r\n            this.displayService = displayService;\r\n            this.callbacks = {};\r\n            this.name = 'System Service';\r\n            this.settingsId = 'system-service:settings';\r\n            this.BasePackage = _BasePackage;\r\n            this.lastSavedAt = 0;\r\n            this.settings = new Proxy(this.defaultsDeep(get_variable(this.settingsId), settings), {\r\n                set: (target, property, value) => {\r\n                    target[property] = value;\r\n                    this.save(this.name, () => {\r\n                        set_variable(this.settingsId, this.settings);\r\n                        this.echo('Settings saved.');\r\n                    });\r\n                    return true;\r\n                }\r\n            });\r\n            this.echo('Loaded.');\r\n        }\r\n        echo(text) {\r\n            this.displayService.echo(`%lightgray%[%deepskyblue%${this.name}%end%]:%end% ${text}`);\r\n        }\r\n        error(text) {\r\n            this.echo(`%red%${text}%end%`);\r\n        }\r\n        save(newCallbackId, newCallback) {\r\n            this.callbacks[newCallbackId] = newCallback;\r\n            if (this.timeoutId) {\r\n                return;\r\n            }\r\n            // For example: 30s - 60s = -30s so it will then be saved instantly.\r\n            const timeoutMilliseconds = Math.max(30000 - (Date.now() - this.lastSavedAt), 0);\r\n            this.timeoutId = window.setTimeout(() => {\r\n                for (let id in this.callbacks) {\r\n                    this.callbacks[id]();\r\n                }\r\n                this.callbacks = {};\r\n                gmcp_save_system();\r\n                this.lastSavedAt = Date.now();\r\n                this.echo('Settings saved.');\r\n                this.timeoutId = undefined;\r\n            }, timeoutMilliseconds);\r\n        }\r\n        mergeDeep(target, ...sources) {\r\n            if (!sources.length) {\r\n                return target;\r\n            }\r\n            ;\r\n            const source = sources.shift();\r\n            if (this.isObject(target) && this.isObject(source)) {\r\n                for (const key in source) {\r\n                    if (this.isObject(source[key])) {\r\n                        if (!target[key]) {\r\n                            Object.assign(target, { [key]: {} });\r\n                        }\r\n                        this.mergeDeep(target[key], source[key]);\r\n                    }\r\n                    else {\r\n                        Object.assign(target, { [key]: source[key] });\r\n                    }\r\n                }\r\n            }\r\n            return this.mergeDeep(target, ...sources);\r\n        }\r\n        defaultsDeep(target, ...sources) {\r\n            return this.mergeDeep({}, ...[...sources, target || {}]);\r\n        }\r\n        sendCommand(command, echo) {\r\n            ws_send(command + '\\r\\n');\r\n            if (echo) {\r\n                display_notice(command);\r\n            }\r\n        }\r\n        sendCommands(commands, echo) {\r\n            commands.forEach(command => {\r\n                this.sendCommand(command, echo);\r\n            });\r\n        }\r\n        isObject(object) {\r\n            return object !== undefined && typeof object === 'object' && !Array.isArray(object);\r\n        }\r\n    }\r\n    client.systemService = new _SystemService({}, client.displayService);\r\n"
        }
    ],
    "actions": [],
    "name": "System Service",
    "enabled": true,
    "id": 1,
    "description": "A System Service"
}