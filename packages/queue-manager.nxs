{
    "type": "group",
    "items": [
        {
            "type": "function",
            "items": [],
            "actions": [],
            "name": "onLoad",
            "enabled": true,
            "id": 2,
            "code": "class QueueManagerC {\r\n        constructor(displayService, systemService) {\r\n            // this.systemService.sendCommands(\r\n            //     new Array(9).fill('').map((_value, count) => {\r\n            //         return `alias set queuemanager${count + 1} ${new Array(count + 1).fill('').map((_value, index) => `%${index + 1}`).join('/')}`;\r\n            //     })\r\n            // );\r\n            this.displayService = displayService;\r\n            this.systemService = systemService;\r\n            this.settings = this.systemService.defaultsDeep({\r\n                enabled: true,\r\n                gag: true\r\n            });\r\n            this.freeQueue = [];\r\n            this.balanceQueue = [];\r\n            this.equilibriumQueue = [];\r\n            this.equilibriumBalanceQueue = [];\r\n            this.classQueue = [];\r\n            this.shipQueue = [];\r\n            this.queuesToSend = new Set();\r\n            this.subscriptions = [];\r\n            this.echo('Loaded.');\r\n        }\r\n        echo(text) {\r\n            this.displayService.echo(`%lightgray%[%deepskyblue%Queue Manager%end%]:%end% ${text}`);\r\n        }\r\n        error(text) {\r\n            this.echo(`%red%${text}%end%`);\r\n        }\r\n        subscribe(queues, subscriber) {\r\n            const subscription = {\r\n                queues,\r\n                subscriber\r\n            };\r\n            this.subscriptions.push(subscription);\r\n            return subscription;\r\n        }\r\n        unsubscribe(subscription) {\r\n            const index = this.subscriptions.findIndex(value => value === subscription);\r\n            this.subscriptions.splice(index, 1);\r\n        }\r\n        once(queues, subscriber) {\r\n            const subscription = this.subscribe(queues, (queue, method, commands) => {\r\n                subscriber(queue, method, commands);\r\n                this.unsubscribe(subscription);\r\n            });\r\n            return subscription;\r\n        }\r\n        emit(queueType, method, args) {\r\n            this.subscriptions.forEach(subscription => {\r\n                if (subscription.queues.includes(queueType)) {\r\n                    subscription.subscriber(queueType, method, args);\r\n                }\r\n            });\r\n        }\r\n        parseCommand(queueType, command) {\r\n            const lowerCommand = command.trim().toLowerCase();\r\n            const queueManagerRegExp = /^queuemanager([1-9])/;\r\n            if (!queueManagerRegExp.test(lowerCommand)) {\r\n                return [];\r\n            }\r\n            const [, countText] = (lowerCommand.match(queueManagerRegExp) || []);\r\n            const count = Number(countText);\r\n            const argumentRegExp = /{([\\w\\W]*?)}/g;\r\n            const commands = [];\r\n            let matches = null;\r\n            while (matches = argumentRegExp.exec(lowerCommand)) {\r\n                commands.push(matches[1]);\r\n            }\r\n            if (commands.length !== count) {\r\n                throw new Error(`Unexpected amount of commands in queued commands. Expected: '${count}' Actual: '${commands.length}' Queue: '${queueType}' Full Command: '${command}'`);\r\n            }\r\n            const queue = this.getQueue(queueType);\r\n            const result = [];\r\n            for (let i = 0; i < commands.length; i++) {\r\n                if (queue[i].command.trim().toLowerCase() !== commands[i].trim().toLowerCase()) {\r\n                    throw new Error(`Unexpected command in queue. Expected: '${queue[i].command}' Actual: '${commands[i]}' Queue: '${queueType}' Full Command: '${command}'`);\r\n                }\r\n                result.push(queue[i]);\r\n            }\r\n            return result;\r\n        }\r\n        noraliseQueueType(queueType) {\r\n            switch (queueType.toLowerCase()) {\r\n                case 'b':\r\n                case 'bal':\r\n                case 'balance':\r\n                    return 'balance';\r\n                case 'e':\r\n                case 'eq':\r\n                case 'equilibrium':\r\n                    return 'equilibrium';\r\n                case 'eb':\r\n                case 'eqbal':\r\n                case 'equilibriumBalance':\r\n                    return 'equilibriumBalance';\r\n                case 'c':\r\n                case 'class':\r\n                case 'class specific':\r\n                case 'class balance':\r\n                    return 'class';\r\n                case 's':\r\n                case 'ship':\r\n                    return 'ship';\r\n                default:\r\n                    return undefined;\r\n            }\r\n        }\r\n        // public parseQueueTypeInteractions(interactions) {\r\n        //     if (!interactions) {\r\n        //         return 'free';\r\n        //     }\r\n        //     if ('class' in interactions && interactions.class) {\r\n        //         return 'class';\r\n        //     }\r\n        //     else if ('ship' in interactions && interactions.ship) {\r\n        //         return 'ship';\r\n        //     }\r\n        //     if ('bal' in interactions || 'eq' in interactions) {\r\n        //         if (interactions.bal && !interactions.eq) {\r\n        //             return 'balance';\r\n        //         }\r\n        //         else if (!interactions.bal && interactions.eq) {\r\n        //             return 'equilibrium';\r\n        //         }\r\n        //         else if (interactions.bal && interactions.eq) {\r\n        //             return 'equilibriumBalance';\r\n        //         }\r\n        //     }\r\n        //     return 'free';\r\n        // }\r\n        getQueue(queueType) {\r\n            switch (queueType) {\r\n                case 'free':\r\n                    return this.freeQueue;\r\n                case 'balance':\r\n                    return this.balanceQueue;\r\n                case 'equilibrium':\r\n                    return this.equilibriumQueue;\r\n                case 'equilibriumBalance':\r\n                    return this.equilibriumBalanceQueue;\r\n                case 'class':\r\n                    return this.classQueue;\r\n                case 'ship':\r\n                    return this.shipQueue;\r\n            }\r\n        }\r\n        appendCommand(command, requires = 'free', consumes = 'free') {\r\n            const queueType = requires;\r\n            const queuedCommand = {\r\n                queue: queueType,\r\n                command,\r\n                requires,\r\n                consumes\r\n            };\r\n            const queue = this.getQueue(queueType);\r\n            queue.push(queuedCommand);\r\n            this.sendQueue(queueType);\r\n            return queuedCommand;\r\n        }\r\n        prependCommand(command, requires = 'free', consumes = 'free') {\r\n            const queueType = requires;\r\n            const queuedCommand = {\r\n                queue: queueType,\r\n                command,\r\n                requires,\r\n                consumes\r\n            };\r\n            const queue = this.getQueue(queueType);\r\n            queue.unshift(queuedCommand);\r\n            this.sendQueue(queueType);\r\n            return queuedCommand;\r\n        }\r\n        // public replaceCommand(_queueType, index, command, requires, _consumes) {\r\n        //     const queueType = client.queueManager.parseQueueTypeInteractions(requires);\r\n        //     const queuedCommand: QueueManagerQueuedCommand = {\r\n        //         queue: queueType,\r\n        //         command\r\n        //     };\r\n        //     const queue = client.queueManager.getQueue(queueType);\r\n        //     let constrainedIndex = index;\r\n        //     if (constrainedIndex < 0) {\r\n        //         constrainedIndex = 0;\r\n        //     }\r\n        //     else if (constrainedIndex > queue.length) {\r\n        //         constrainedIndex = queue.length;\r\n        //     }\r\n        //     queue.splice(constrainedIndex, 1, queuedCommand);\r\n        //     return queuedCommand;\r\n        // }\r\n        // public insertCommand(queueType, index, command, _requires, _consumes) {\r\n        //     const queuedCommand: QueueManagerQueuedCommand = {\r\n        //         queue: queueType,\r\n        //         command\r\n        //     };\r\n        //     const queue = client.queueManager.getQueue(queueType);\r\n        //     let constrainedIndex = index;\r\n        //     if (constrainedIndex < 0) {\r\n        //         constrainedIndex = 0;\r\n        //     }\r\n        //     else if (constrainedIndex > queue.length) {\r\n        //         constrainedIndex = queue.length;\r\n        //     }\r\n        //     queue.splice(constrainedIndex, 0, queuedCommand);\r\n        //     return queuedCommand;\r\n        // }\r\n        removeCommand(queueType, index) {\r\n            const queue = this.getQueue(queueType);\r\n            let constrainedIndex = index;\r\n            if (constrainedIndex < 0) {\r\n                constrainedIndex = 0;\r\n            }\r\n            else if (constrainedIndex > queue.length) {\r\n                constrainedIndex = queue.length;\r\n            }\r\n            queue.splice(constrainedIndex, 1);\r\n            this.sendQueue(queueType);\r\n        }\r\n        clearQueue(queueType) {\r\n            const queue = this.getQueue(queueType);\r\n            queue.splice(0, queue.length);\r\n        }\r\n        sendQueue(queueType) {\r\n            if (this.queuesToSend.has(queueType)) {\r\n                return;\r\n            }\r\n            this.queuesToSend.add(queueType);\r\n            setTimeout(() => {\r\n                this.queuesToSend.forEach(queueTypeToSend => {\r\n                    this.queuesToSend.delete(queueTypeToSend);\r\n                    let queueShortName;\r\n                    switch (queueTypeToSend) {\r\n                        case 'free':\r\n                            if (this.freeQueue.length > 0) {\r\n                                client.systemService.sendCommands(this.freeQueue.map(value => value.command));\r\n                                this.clearQueue('free');\r\n                            }\r\n                            break;\r\n                        case 'balance':\r\n                            queueShortName = 'bal';\r\n                            break;\r\n                        case 'equilibrium':\r\n                            queueShortName = 'eq';\r\n                            break;\r\n                        case 'equilibriumBalance':\r\n                            queueShortName = 'eqbal';\r\n                            break;\r\n                        case 'class':\r\n                            queueShortName = 'class';\r\n                            break;\r\n                        case 'ship':\r\n                            queueShortName = 'ship';\r\n                            break;\r\n                    }\r\n                    if (!queueShortName) {\r\n                        return;\r\n                    }\r\n                    const queue = this.getQueue(queueTypeToSend);\r\n                    client.systemService.sendCommand(`clearqueue ${queueShortName}`);\r\n                    if (queue.length > 0) {\r\n                        const commands = [];\r\n                        const length = Math.min(queue.length, 9);\r\n                        for (let i = 0; i < length; i++) {\r\n                            const command = queue[i];\r\n                            commands.push(command.command);\r\n                            if (command.consumes !== 'free') {\r\n                                break;\r\n                            }\r\n                        }\r\n                        const expectedCommandArguments = commands.map(command => `{${command}}`).join(' ');\r\n                        const expectedCommand = `queuemanager${commands.length} ${expectedCommandArguments}`;\r\n                        client.systemService.sendCommand(`queue add ${queueShortName} ${expectedCommand}`);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        onRun(args) {\r\n            if (!this.settings.enabled) {\r\n                return;\r\n            }\r\n            if (this.settings.gag) {\r\n                gag_current_line();\r\n            }\r\n            const queueType = this.noraliseQueueType(args[1]);\r\n            if (!queueType) {\r\n                this.error(`Unknown queue type '%lightgrey%${args[1]}%end%'.`);\r\n                if (this.settings.gag) {\r\n                    this.error(`Original line '%lightgrey%${args[0]}%end%'.`);\r\n                }\r\n                return;\r\n            }\r\n            const command = args[2];\r\n            const commands = this.parseCommand(queueType, command);\r\n            commands.forEach(() => {\r\n                this.removeCommand(queueType, 0);\r\n            });\r\n            this.emit(queueType, 'run', { queue: queueType, index: 0, commands });\r\n        }\r\n    }\r\n    client.queueManager = new QueueManagerC(client.displayService, client.systemService);\r\n"
        },
        {
            "type": "group",
            "items": [
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (!client.queueManager.settings.enabled) {\r\n            return;\r\n        }\r\n        if (client.queueManager.settings.gag) {\r\n            gag_current_line();\r\n        }\r\n        // const command = args[1];\r\n        const queueType = client.queueManager.noraliseQueueType(args[2]);\r\n        if (!queueType) {\r\n            client.queueManager.error(`Unknown queue type '${args[2]}'.`);\r\n            if (client.queueManager.settings.gag) {\r\n                client.queueManager.error(`Original line '%lightgrey%${args[0]}%end%'.`);\r\n            }\r\n            return;\r\n        }\r\n        // const queue = client.queueManager.getQueue(queueType);\r\n        // client.queueManager.appendCommand(command, { [queueType]: true });\r\n        // client.queueManager.emit(queueType, 'add', { queue: queueType, index: queue.length - 1, command });\r\n    "
                        }
                    ],
                    "name": "Automatically Added",
                    "enabled": true,
                    "id": 3,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^([\\w\\W]+) was added to your ([\\w\\W]+) queue\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (!client.queueManager.settings.enabled) {\r\n            return;\r\n        }\r\n        if (client.queueManager.settings.gag) {\r\n            gag_current_line();\r\n        }\r\n        // client.queueManager.clearQueue('balance');\r\n        // client.queueManager.clearQueue('equilibrium');\r\n        // client.queueManager.clearQueue('equilibriumBalance');\r\n        // client.queueManager.clearQueue('class');\r\n        // client.queueManager.clearQueue('ship');\r\n        // client.queueManager.emit('balance', 'clear', { queue: 'balance', index: 0, command: '' });\r\n        // client.queueManager.emit('equilibrium', 'clear', { queue: 'equilibrium', index: 0, command: '' });\r\n        // client.queueManager.emit('equilibriumBalance', 'clear', { queue: 'equilibriumBalance', index: 0, command: '' });\r\n        // client.queueManager.emit('class', 'clear', { queue: 'class', index: 0, command: '' });\r\n        // client.queueManager.emit('ship', 'clear', { queue: 'ship', index: 0, command: '' });\r\n    "
                        }
                    ],
                    "name": "Cleared All Queues",
                    "enabled": true,
                    "id": 4,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^Cleared your queues\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (!client.queueManager.settings.enabled) {\r\n            return;\r\n        }\r\n        if (client.queueManager.settings.gag) {\r\n            gag_current_line();\r\n        }\r\n        const queueType = client.queueManager.noraliseQueueType(args[1]);\r\n        if (!queueType) {\r\n            client.queueManager.error(`Unknown queue type '${args[1]}'.`);\r\n            if (client.queueManager.settings.gag) {\r\n                client.queueManager.error(`Original line '%lightgrey%${args[0]}%end%'.`);\r\n            }\r\n            return;\r\n        }\r\n        // client.queueManager.clearQueue(queueType);\r\n        // client.queueManager.emit(queueType, 'clear', { queue: queueType, index: 0, command: '' });\r\n    "
                        }
                    ],
                    "name": "Cleared Queue",
                    "enabled": true,
                    "id": 5,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^\\[System\\]: Queued ([\\w\\W]+) commands cleared\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (!client.queueManager.settings.enabled) {\r\n            return;\r\n        }\r\n        if (client.queueManager.settings.gag) {\r\n            gag_current_line();\r\n        }\r\n        // const index = Number(args[1]) - 1;\r\n        const queueType = client.queueManager.noraliseQueueType(args[2]);\r\n        // const command = args[3];\r\n        if (!queueType) {\r\n            client.queueManager.error(`Unknown queue type '%lightgrey%${args[2]}%end%'.`);\r\n            if (client.queueManager.settings.gag) {\r\n                client.queueManager.error(`Original line '%lightgrey%${args[0]}%end%'.`);\r\n            }\r\n            return;\r\n        }\r\n        // client.queueManager.insertCommand(queueType, index, command);\r\n        // client.queueManager.emit(queueType, 'insert', { queue: queueType, index, command });\r\n    "
                        }
                    ],
                    "name": "Inserted",
                    "enabled": true,
                    "id": 6,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^\\[System\\]: inserted command #(\\d) in the ([\\w\\W]+) queue with ([\\w\\W]+)\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (!client.queueManager.settings.enabled) {\r\n            return;\r\n        }\r\n        if (client.queueManager.settings.gag) {\r\n            gag_current_line();\r\n        }\r\n        // const command = args[1];\r\n        const queueType = client.queueManager.noraliseQueueType(args[2]);\r\n        if (!queueType) {\r\n            client.queueManager.error(`Unknown queue type '%lightgrey%${args[2]}%end%'.`);\r\n            if (client.queueManager.settings.gag) {\r\n                client.queueManager.error(`Original line '%lightgrey%${args[0]}%end%'.`);\r\n            }\r\n            return;\r\n        }\r\n        // const queue = client.queueManager.getQueue(queueType);\r\n        // client.queueManager.appendCommand(command, { [queueType]: true });\r\n        //  client.queueManager.emit(queueType, 'add', { queue: queueType, index: queue.length - 1, command });\r\n    "
                        }
                    ],
                    "name": "Manually Added",
                    "enabled": true,
                    "id": 7,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^\\[System\\]: Added ([\\w\\W]+) to your ([\\w\\W]+) queue\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (!client.queueManager.settings.enabled) {\r\n            return;\r\n        }\r\n        if (client.queueManager.settings.gag) {\r\n            gag_current_line();\r\n        }\r\n        // const command = args[1];\r\n        const queueType = client.queueManager.noraliseQueueType(args[2]);\r\n        if (!queueType) {\r\n            client.queueManager.error(`Unknown queue type '%lightgrey%${args[2]}%end%'.`);\r\n            if (client.queueManager.settings.gag) {\r\n                client.queueManager.error(`Original line '%lightgrey%${args[0]}%end%'.`);\r\n            }\r\n            return;\r\n        }\r\n        // client.queueManager.prependCommand(command, { [queueType]: true });\r\n        // client.queueManager.emit(queueType, 'prepend', { queue: queueType, index: 0, command });\r\n    "
                        }
                    ],
                    "name": "Prepended",
                    "enabled": true,
                    "id": 8,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^\\[System\\]: Prepended ([\\w\\W]+) to your ([\\w\\W]+) queue\\."
                },
                {
                    "type": "group",
                    "items": [
                        {
                            "type": "trigger",
                            "items": [],
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (!client.queueManager.settings.enabled) {\r\n            return;\r\n        }\r\n        if (client.queueManager.settings.gag) {\r\n            gag_current_line();\r\n        }\r\n        // client.queueManager.clearQueue('balance');\r\n        // client.queueManager.clearQueue('equilibrium');\r\n        // client.queueManager.clearQueue('equilibriumBalance');\r\n        // client.queueManager.clearQueue('class');\r\n        // client.queueManager.clearQueue('ship');\r\n        // client.queueManager.emit(queueType, 'clear', { queue: queueType, index: 0, command: '' });\r\n    "
                                }
                            ],
                            "name": "queueAlreadyEmpty:0",
                            "enabled": true,
                            "id": 9,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^Your queues are already empty\\.$"
                        },
                        {
                            "type": "trigger",
                            "items": [],
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (!client.queueManager.settings.enabled) {\r\n            return;\r\n        }\r\n        if (client.queueManager.settings.gag) {\r\n            gag_current_line();\r\n        }\r\n        // client.queueManager.clearQueue('balance');\r\n        // client.queueManager.clearQueue('equilibrium');\r\n        // client.queueManager.clearQueue('equilibriumBalance');\r\n        // client.queueManager.clearQueue('class');\r\n        // client.queueManager.clearQueue('ship');\r\n        // client.queueManager.emit(queueType, 'clear', { queue: queueType, index: 0, command: '' });\r\n    "
                                }
                            ],
                            "name": "queueAlreadyEmpty:1",
                            "enabled": true,
                            "id": 10,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^You have no commands queued for equilibrium\\.$"
                        },
                        {
                            "type": "trigger",
                            "items": [],
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (!client.queueManager.settings.enabled) {\r\n            return;\r\n        }\r\n        if (client.queueManager.settings.gag) {\r\n            gag_current_line();\r\n        }\r\n        // client.queueManager.clearQueue('balance');\r\n        // client.queueManager.clearQueue('equilibrium');\r\n        // client.queueManager.clearQueue('equilibriumBalance');\r\n        // client.queueManager.clearQueue('class');\r\n        // client.queueManager.clearQueue('ship');\r\n        // client.queueManager.emit(queueType, 'clear', { queue: queueType, index: 0, command: '' });\r\n    "
                                }
                            ],
                            "name": "queueAlreadyEmpty:2",
                            "enabled": true,
                            "id": 11,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^Your (?:eqbal|class balance|ship) queue is already empty\\.$"
                        }
                    ],
                    "actions": [],
                    "name": "queueAlreadyEmpty",
                    "enabled": true,
                    "id": 12,
                    "matching": "regexp"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (!client.queueManager.settings.enabled) {\r\n            return;\r\n        }\r\n        if (client.queueManager.settings.gag) {\r\n            gag_current_line();\r\n        }\r\n        // const index = Number(args[1]) - 1;\r\n        const queueType = client.queueManager.noraliseQueueType(args[2]);\r\n        if (!queueType) {\r\n            client.queueManager.error(`Unknown queue type '%lightgrey%${args[2]}%end%'.`);\r\n            if (client.queueManager.settings.gag) {\r\n                client.queueManager.error(`Original line '%lightgrey%${args[0]}%end%'.`);\r\n            }\r\n            return;\r\n        }\r\n        // const queue = client.queueManager.getQueue(queueType);\r\n        // const queuedCommand = <QueueManagerQueuedCommand | undefined>queue[index];\r\n        // if (!queuedCommand) {\r\n        //     client.queueManager.error(`Untracked command in '%lightgrey%${queueType}%end%' at position '%lightgrey%${index}%end%'.`);\r\n        //     return;\r\n        // }\r\n        // client.queueManager.removeCommand(queueType, index);\r\n        // client.queueManager.emit(queueType, 'remove', { queue: queueType, index, command: queuedCommand.command });\r\n    "
                        }
                    ],
                    "name": "Removed",
                    "enabled": true,
                    "id": 13,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^\\[System\\]: Removed the command at position (\\d+) in your ([\\w\\W]+) queue\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (!client.queueManager.settings.enabled) {\r\n            return;\r\n        }\r\n        if (client.queueManager.settings.gag) {\r\n            gag_current_line();\r\n        }\r\n        // const index = Number(args[1]) - 1;\r\n        const queueType = client.queueManager.noraliseQueueType(args[2]);\r\n        // const command = args[3];\r\n        if (!queueType) {\r\n            client.queueManager.error(`Unknown queue type '%lightgrey%${args[2]}%end%'.`);\r\n            if (client.queueManager.settings.gag) {\r\n                client.queueManager.error(`Original line '%lightgrey%${args[0]}%end%'.`);\r\n            }\r\n            return;\r\n        }\r\n        // client.queueManager.replaceCommand(queueType, index, command);\r\n        // client.queueManager.emit(queueType, 'replace', { queue: queueType, index, command });\r\n    "
                        }
                    ],
                    "name": "Replaced",
                    "enabled": true,
                    "id": 14,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^\\[System\\]: replaced command #(\\d+) in the ([\\w\\W]+) queue with ([\\w\\W]+)\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "client.queueManager.onRun(args);\r\n    "
                        }
                    ],
                    "name": "Running",
                    "enabled": true,
                    "id": 15,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^\\[System\\]: Running queued ([\\w\\W]+) command: ([\\w\\W]+)$"
                }
            ],
            "actions": [],
            "name": "Triggers",
            "enabled": true,
            "id": 16
        }
    ],
    "actions": [],
    "name": "Queue Manager",
    "enabled": true,
    "id": 1,
    "description": "A Queue Manager"
}