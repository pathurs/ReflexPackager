{
    "type": "group",
    "items": [
        {
            "type": "function",
            "items": [],
            "actions": [],
            "name": "onLoad",
            "enabled": true,
            "id": 2,
            "code": "(function () {\n    client.shopmanager = {\n        settings: client.systemservice.defaultsDeep(get_variable('shop-manager:settings'), {\n            enabled: true,\n            shops: []\n        }),\n        echo(text) {\n            client.displayservice.echo(`%lightgray%[%deepskyblue%Shop Manager%end%]:%end% ${text}`);\n        },\n        error(text) {\n            client.shopmanager.echo(`%red%${text}`);\n        },\n        save() {\n            client.systemservice.save('shop-manager', () => {\n                set_variable('shop-manager:settings', client.shopmanager.settings);\n                client.shopmanager.echo('Settings saved.');\n            });\n        },\n        getCurrentShop() {\n            const currentShop = client.shopmanager.settings.shops.find(value => value.room.num === client.gmcpservice.room.num);\n            return currentShop;\n        },\n        registerShop() {\n            let currentShop = client.shopmanager.getCurrentShop();\n            if (currentShop) {\n                client.shopmanager.error(`Shop '%lightgray%${client.gmcpservice.room.name}%end%' (%lightgray%${client.gmcpservice.room.num}%end%) is already registered.`);\n                return;\n            }\n            currentShop = {\n                room: client.gmcpservice.room,\n                storefront: {\n                    roomId: client.gmcpservice.room.num,\n                    expectedItemIds: []\n                },\n                stockroom: {\n                    roomId: client.gmcpservice.room.exits.d,\n                    expectedItemIds: []\n                },\n                currentBins: {\n                    '0': {\n                        id: '0'\n                    },\n                    '1': {\n                        id: '1'\n                    },\n                    '2': {\n                        id: '2'\n                    },\n                    '3': {\n                        id: '3'\n                    },\n                    '4': {\n                        id: '4'\n                    },\n                    '5': {\n                        id: '5'\n                    },\n                    '6': {\n                        id: '6'\n                    },\n                    '7': {\n                        id: '7'\n                    }\n                },\n                bins: {\n                    '0': {\n                        id: '0'\n                    },\n                    '1': {\n                        id: '1'\n                    },\n                    '2': {\n                        id: '2'\n                    },\n                    '3': {\n                        id: '3'\n                    },\n                    '4': {\n                        id: '4'\n                    },\n                    '5': {\n                        id: '5'\n                    },\n                    '6': {\n                        id: '6'\n                    },\n                    '7': {\n                        id: '7'\n                    }\n                },\n                currentPolicies: [],\n                policies: []\n            };\n            client.shopmanager.settings.shops.push(currentShop);\n            client.shopmanager.save();\n            client.shopmanager.echo(`Registered shop '%lightgray%${client.gmcpservice.room.name}%end%' (%lightgray%${client.gmcpservice.room.num}%end%).`);\n            return currentShop;\n        },\n        unregisterShop() {\n            const currentShop = client.shopmanager.getCurrentShop();\n            if (!currentShop) {\n                client.shopmanager.error(`Shop '%lightgray%${client.gmcpservice.room.name}%end%' (%lightgray%${client.gmcpservice.room.num}%end%) is not registered.`);\n                return;\n            }\n            client.shopmanager.save();\n            client.shopmanager.echo(`Unregistered shop '%lightgray%${client.gmcpservice.room.name}%end%' (%lightgray%${client.gmcpservice.room.num}%end%).`);\n        },\n        checkStorefront(shop, items) {\n            if (shop.storefront.expectedTotemId) {\n                const expectedTotem = items.find(value => value.id === shop.storefront.expectedTotemId);\n                if (!expectedTotem) {\n                    client.shopmanager.error(`Storefront totem '%lightgray%${shop.storefront.expectedTotemId}%end%' is missing!`);\n                }\n            }\n            if (shop.storefront.expectedEyeSigilId) {\n                const expectedEyeSigil = items.find(value => value.id === shop.storefront.expectedEyeSigilId);\n                if (!expectedEyeSigil) {\n                    client.shopmanager.error(`Storefront eye sigil '%lightgray%${shop.storefront.expectedEyeSigilId}%end%' is missing!`);\n                }\n            }\n            if (shop.storefront.expectedKeySigilId) {\n                const expectedKeySigil = items.find(value => value.id === shop.storefront.expectedKeySigilId);\n                if (!expectedKeySigil) {\n                    client.shopmanager.error(`Storefront key sigil '%lightgray%${shop.storefront.expectedKeySigilId}%end%' is missing!`);\n                }\n            }\n            if (shop.storefront.expectedMonolithSigilId) {\n                const expectedMonolithSigil = items.find(value => value.id === shop.storefront.expectedMonolithSigilId);\n                if (!expectedMonolithSigil) {\n                    client.shopmanager.error(`Storefront monolith sigil '%lightgray%${shop.storefront.expectedMonolithSigilId}%end%' is missing!`);\n                }\n            }\n            if (shop.storefront.expectedItemIds.length > 0) {\n                shop.storefront.expectedItemIds.forEach(expectedId => {\n                    const expected = items.find(value => value.id === expectedId);\n                    if (!expected) {\n                        client.shopmanager.error(`Storefront item '%lightgray%${expectedId}%end%' is missing!`);\n                    }\n                });\n            }\n        },\n        checkStockroom(shop, items) {\n            if (shop.stockroom.expectedTotemId) {\n                const expectedTotem = items.find(value => value.id === shop.stockroom.expectedTotemId);\n                if (!expectedTotem) {\n                    client.shopmanager.error(`Stockroom totem '%lightgray%${shop.stockroom.expectedTotemId}%end%' is missing!`);\n                }\n            }\n            if (shop.stockroom.expectedEyeSigilId) {\n                const expectedEyeSigil = items.find(value => value.id === shop.stockroom.expectedEyeSigilId);\n                if (!expectedEyeSigil) {\n                    client.shopmanager.error(`Stockroom eye sigil '%lightgray%${shop.stockroom.expectedEyeSigilId}%end%' is missing!`);\n                }\n            }\n            if (shop.stockroom.expectedKeySigilId) {\n                const expectedKeySigil = items.find(value => value.id === shop.stockroom.expectedKeySigilId);\n                if (!expectedKeySigil) {\n                    client.shopmanager.error(`Stockroom key sigil '%lightgray%${shop.stockroom.expectedKeySigilId}%end%' is missing!`);\n                }\n            }\n            if (shop.stockroom.expectedMonolithSigilId) {\n                const expectedMonolithSigil = items.find(value => value.id === shop.stockroom.expectedMonolithSigilId);\n                if (!expectedMonolithSigil) {\n                    client.shopmanager.error(`Stockroom monolith sigil '%lightgray%${shop.stockroom.expectedMonolithSigilId}%end%' is missing!`);\n                }\n            }\n            if (shop.stockroom.expectedShimmeringOrbId) {\n                const expectedShimmeringOrb = items.find(value => value.id === shop.stockroom.expectedShimmeringOrbId);\n                if (!expectedShimmeringOrb) {\n                    client.shopmanager.error(`Stockroom shimmering orb '%lightgray%${shop.stockroom.expectedShimmeringOrbId}%end%' is missing!`);\n                }\n            }\n            if (shop.stockroom.expectedItemIds.length > 0) {\n                shop.stockroom.expectedItemIds.forEach(expectedId => {\n                    const expected = items.find(value => value.id === expectedId);\n                    if (!expected) {\n                        client.shopmanager.error(`Stockroom item '%lightgray%${expectedId}%end%' is missing!`);\n                    }\n                });\n            }\n        },\n        parseRawBinVisibility(visibility) {\n            const [, type, exception] = visibility.toLowerCase().trim().match(/^(all|none)(?: except ((?:group|person|code) \\w+))?^/) || [];\n            if (!type) {\n                client.shopmanager.error(`Could not parse bin visibility '${visibility}'.`);\n                client.shopmanager.echo(`Syntax: %lightgray%ALL|NONE%end%.`);\n                client.shopmanager.echo(`Syntax: %lightgray%ALL|NONE EXCEPT GROUP|PERSON|CODE value%end%.`);\n                return undefined;\n            }\n            return {\n                type,\n                exception\n            };\n        },\n        setBinName(id, name) {\n            const currentShop = client.shopmanager.getCurrentShop();\n            if (!currentShop) {\n                client.shopmanager.error(`You are not currently standing in an active shop.`);\n                return;\n            }\n            if (id === '0' && name !== undefined) {\n                client.shopmanager.error(`Cannot name bin 0.`);\n                return;\n            }\n            currentShop.bins[id] = {\n                id,\n                name\n            };\n            client.shopmanager.save();\n            client.shopmanager.echo(`Set bin '%lightgray%${id}%end%' name to '%lightgray%${name}%end%'.`);\n        },\n        setBinVisibility(id, visibility) {\n            const currentShop = client.shopmanager.getCurrentShop();\n            if (!currentShop) {\n                client.shopmanager.error(`You are not currently standing in an active shop.`);\n                return;\n            }\n            currentShop.bins[id] = {\n                id,\n                visibility\n            };\n            client.shopmanager.save();\n            client.shopmanager.echo(`Set bin '%lightgray%${id}%end%' visibility to '%lightgray%${JSON.stringify(visibility)}%end%'.`);\n        },\n        parseRawPolicy(rawPolicy) {\n            const [, type, who, modifier] = rawPolicy\n                .toLowerCase()\n                .trim()\n                .match(/^(group|person) ([a-z]+) (\\+\\d+|\\-\\d+|0|refuse)$/) || [];\n            if (!type || !who || !modifier) {\n                client.shopmanager.error(`Could not parse policy '%lightgray%${rawPolicy}%end%'.`);\n                client.shopmanager.echo(`Syntax: %lightgray%GROUP|PERSON who +percent%end%.`);\n                client.shopmanager.echo(`Syntax: %lightgray%GROUP|PERSON who -percent%end%.`);\n                client.shopmanager.echo(`Syntax: %lightgray%GROUP|PERSON who 0%end%.`);\n                client.shopmanager.echo(`Syntax: %lightgray%GROUP|PERSON who REFUSE%end%.`);\n                return undefined;\n            }\n            const parsedModifier = modifier === 'refuse' || modifier === '0' ? 'refuse' : Number(modifier);\n            if (parsedModifier !== 'refuse' && isNaN(parsedModifier)) {\n                client.shopmanager.error(`Could not parse policy '%lightgray%${rawPolicy}%end%'.`);\n                client.shopmanager.echo(`Syntax: %lightgray%GROUP|PERSON who +percent%end%.`);\n                client.shopmanager.echo(`Syntax: %lightgray%GROUP|PERSON who -percent%end%.`);\n                client.shopmanager.echo(`Syntax: %lightgray%GROUP|PERSON who 0%end%.`);\n                client.shopmanager.echo(`Syntax: %lightgray%GROUP|PERSON who REFUSE%end%.`);\n                return undefined;\n            }\n            return {\n                type,\n                who,\n                modifier: parsedModifier\n            };\n        },\n        addPolicy(policy) {\n            const currentShop = client.shopmanager.getCurrentShop();\n            if (!currentShop) {\n                client.shopmanager.error(`You are not currently standing in an active shop.`);\n                return;\n            }\n            currentShop.policies.push(policy);\n            client.shopmanager.save();\n            client.shopmanager.echo(`Added policy '%lightgray%${JSON.stringify(policy)}%end%'.`);\n        },\n        removePolicy(id) {\n            const currentShop = client.shopmanager.getCurrentShop();\n            if (!currentShop) {\n                client.shopmanager.error(`You are not currently standing in an active shop.`);\n                return;\n            }\n            const policy = currentShop.policies[id];\n            if (!policy) {\n                client.shopmanager.error(`Could not find policy '${id}'.`);\n                return;\n            }\n            currentShop.policies.splice(id, 1);\n            client.shopmanager.echo(`Removed policy '%lightgray%${id}%end%'.`);\n            client.shopmanager.save();\n        },\n        do(command) {\n            const currentShop = client.shopmanager.getCurrentShop();\n            if (!currentShop) {\n                client.shopmanager.error(`You are not currently standing in an active shop.`);\n                return;\n            }\n            client.shopmanager.echo(`Doing: '%lightgray%${command}%end%'.`);\n            client.queuemanager.appendCommand(`unlock door down`, 'equilibriumBalance');\n            client.queuemanager.appendCommand(`open door down`, 'equilibriumBalance');\n            client.queuemanager.appendCommand(`down`, 'equilibriumBalance');\n            client.queuemanager.appendCommand(`close door up`, 'equilibriumBalance');\n            client.queuemanager.appendCommand(`lock door up`, 'equilibriumBalance');\n            client.queuemanager.appendCommand(command, 'equilibriumBalance', 'equilibriumBalance');\n            client.queuemanager.appendCommand(`unlock door up`, 'equilibriumBalance');\n            client.queuemanager.appendCommand(`open door up`, 'equilibriumBalance');\n            client.queuemanager.appendCommand(`up`, 'equilibriumBalance');\n            client.queuemanager.appendCommand(`close door down`, 'equilibriumBalance');\n            client.queuemanager.appendCommand(`lock door down`, 'equilibriumBalance');\n        },\n        updateStockroom() {\n            const currentShop = client.shopmanager.getCurrentShop();\n            if (!currentShop) {\n                client.shopmanager.error(`You are not currently standing in an active shop.`);\n                return;\n            }\n            client.shopmanager.echo(`Updating stockroom.`);\n            client.queuemanager.appendCommand(`unlock door down`, 'equilibriumBalance');\n            client.queuemanager.appendCommand(`open door down`, 'equilibriumBalance');\n            client.queuemanager.appendCommand(`down`, 'equilibriumBalance');\n            client.queuemanager.appendCommand(`close door up`, 'equilibriumBalance');\n            client.queuemanager.appendCommand(`lock door up`, 'equilibriumBalance');\n            currentShop.policies.forEach(policy => {\n                const modifier = typeof policy.modifier === 'number'\n                    ? (policy.modifier > 0 ? `+${policy.modifier}` : policy.modifier)\n                    : policy.modifier;\n                client.queuemanager.appendCommand(`price policy add ${policy.type} ${policy.who} ${modifier}`, 'equilibriumBalance');\n            });\n            client.queuemanager.appendCommand(`price policy list`, 'equilibriumBalance');\n            for (let binId in currentShop.bins) {\n                const bin = currentShop.bins[binId];\n                if ('name' in bin && bin.name) {\n                    client.queuemanager.appendCommand(`price bin ${binId} name ${bin.name}`, 'equilibriumBalance');\n                }\n                if (bin.visibility) {\n                    if (bin.visibility.exception) {\n                        client.queuemanager.appendCommand(`price bin ${binId} ${bin.visibility.type} except ${bin.visibility.exception}`, 'equilibriumBalance');\n                    }\n                    else {\n                        client.queuemanager.appendCommand(`price bin ${binId} ${bin.visibility.type}`, 'equilibriumBalance');\n                    }\n                }\n            }\n            client.queuemanager.appendCommand(`unlock door up`, 'equilibriumBalance');\n            client.queuemanager.appendCommand(`open door up`, 'equilibriumBalance');\n            client.queuemanager.appendCommand(`up`, 'equilibriumBalance');\n            client.queuemanager.appendCommand(`close door down`, 'equilibriumBalance');\n            client.queuemanager.appendCommand(`lock door down`, 'equilibriumBalance');\n        }\n    };\n    // Keep Storefront Items and Stockroom Items up to date\n    client.gmcpservice.subscribe(['Room.Info'], args => {\n        const roomId = args.gmcp_args.num;\n        const currentShop = client.shopmanager.settings.shops.find(value => value.storefront.roomId === roomId || value.stockroom.roomId === roomId);\n        if (currentShop) {\n            const items = client.gmcpservice.items.room;\n            if (currentShop.storefront.roomId === roomId) {\n                client.shopmanager.checkStorefront(currentShop, items);\n            }\n            else if (currentShop.stockroom.roomId === roomId) {\n                client.shopmanager.checkStockroom(currentShop, items);\n            }\n        }\n    });\n    client.shopmanager.echo('Loaded.');\n})(args);"
        },
        {
            "type": "group",
            "items": [
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        const id = args[1];\n        const name = args[2];\n        if (!['0', '1', '2', '3', '4', '5', '6', '7'].includes(id)) {\n            client.shopmanager.error(`Bin ID '${id}' is invalid. The bin ID must be a whole number between 0 and 7.`);\n            return;\n        }\n        client.shopmanager.setBinName(id, name);\n    })(args);"
                        }
                    ],
                    "name": "Shop Manager Bin Name",
                    "enabled": true,
                    "id": 3,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:sm|shop\\-manager|shop manager) bin (\\d+) name ([\\w\\W]+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        const id = args[1];\n        const visibility = client.shopmanager.parseRawBinVisibility(args[2]);\n        if (!visibility) {\n            return;\n        }\n        if (!['0', '1', '2', '3', '4', '5', '6', '7'].includes(id)) {\n            client.shopmanager.error(`Bin ID '${id}' is invalid. The bin ID must be a whole number between 0 and 7.`);\n            return;\n        }\n        client.shopmanager.setBinVisibility(id, visibility);\n    })(args);"
                        }
                    ],
                    "name": "Shop Manager Bin Visibility",
                    "enabled": true,
                    "id": 4,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:sm|shop\\-manager|shop manager) bin (\\d+) visibility ([\\w\\W]+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        const command = args[1];\n        client.shopmanager.do(command);\n    })(args);"
                        }
                    ],
                    "name": "Shop Manager Do",
                    "enabled": true,
                    "id": 5,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:sm|shop\\-manager|shop manager) do ([\\w\\W]+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        const policy = client.shopmanager.parseRawPolicy(args[1]);\n        if (!policy) {\n            return;\n        }\n        client.shopmanager.addPolicy(policy);\n    })(args);"
                        }
                    ],
                    "name": "Shop Manager Policy Add",
                    "enabled": true,
                    "id": 6,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:sm|shop\\-manager|shop manager) policy add ([\\w\\W]+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        const id = Number(args[1]);\n        client.shopmanager.removePolicy(id);\n    })(args);"
                        }
                    ],
                    "name": "Shop Manager Policy Remove",
                    "enabled": true,
                    "id": 7,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:sm|shop\\-manager|shop manager) policy remove (\\d+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function () {\n        client.shopmanager.registerShop();\n    })(args);"
                        }
                    ],
                    "name": "Shop Manager Shop Register",
                    "enabled": true,
                    "id": 8,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:sm|shop\\-manager|shop manager) shop register$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function () {\n        client.shopmanager.unregisterShop();\n    })(args);"
                        }
                    ],
                    "name": "Shop Manager Shop Unregister",
                    "enabled": true,
                    "id": 9,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:sm|shop\\-manager|shop manager) shop unregister$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        const currentShop = client.shopmanager.getCurrentShop();\n        if (!currentShop) {\n            client.shopmanager.error(`You are not currently standing in an active shop.`);\n            return;\n        }\n        const id = args[2];\n        switch (args[1]) {\n            case 'totem':\n                currentShop.stockroom.expectedTotemId = id;\n                client.shopmanager.echo(`Set expected %lightgray%totem%end% in stockroom of shop '%lightgray%${currentShop.room.name}%end%' to '%lightgray%${id}%end%'.`);\n                break;\n            case 'eye':\n            case 'eyesigil':\n            case 'eye sigil':\n                currentShop.stockroom.expectedEyeSigilId = id;\n                client.shopmanager.echo(`Set expected %lightgray%eye sigil%end% in stockroom of shop '%lightgray%${currentShop.room.name}%end%' to '%lightgray%${id}%end%'.`);\n                break;\n            case 'key':\n            case 'keysigil':\n            case 'key sigil':\n                currentShop.stockroom.expectedKeySigilId = id;\n                client.shopmanager.echo(`Set expected %lightgray%key sigil%end% in stockroom of shop '%lightgray%${currentShop.room.name}%end%' to '%lightgray%${id}%end%'.`);\n                break;\n            case 'mono':\n            case 'monolith':\n            case 'monolithsigil':\n            case 'monolith sigil':\n                currentShop.stockroom.expectedMonolithSigilId = id;\n                client.shopmanager.echo(`Set expected %lightgray%monolith sigil%end% in stockroom of shop '%lightgray%${currentShop.room.name}%end%' to '%lightgray%${id}%end%'.`);\n                break;\n            case 'orb':\n            case 'shimmeringorb':\n            case 'shimmering orb':\n                currentShop.stockroom.expectedShimmeringOrbId = id;\n                client.shopmanager.echo(`Set expected %lightgray%shimmering orb%end% in stockroom of shop '%lightgray%${currentShop.room.name}%end%' to '%lightgray%${id}%end%'.`);\n                break;\n            case undefined:\n                if (currentShop.stockroom.expectedItemIds.includes(id)) {\n                    client.shopmanager.error(`Already expecting item '%lightgray%${id}%end%' in stockroom of shop '%lightgray%${currentShop.room.name}%end%'.`);\n                    return;\n                }\n                currentShop.stockroom.expectedItemIds.push(id);\n                client.shopmanager.echo(`Added expected item '%lightgray%totem%end%' in stockroom of shop '%lightgray%${currentShop.room.name}%end%'.`);\n                break;\n            default:\n                client.shopmanager.error(`Invalid expected item '%lightgray%${args[1]}%end%'.`);\n                return;\n        }\n        client.shopmanager.save();\n    })(args);"
                        }
                    ],
                    "name": "Shop Manager Stockroom Expect",
                    "enabled": true,
                    "id": 10,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:sm|shop\\-manager|shop manager) stockroom expect(?: (totem|eye|eye ?sigil|key|key ?sigil|mono|monolith|monolith ?sigil|orb|shimmering ?orb))? (\\d+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        const currentShop = client.shopmanager.getCurrentShop();\n        if (!currentShop) {\n            client.shopmanager.error(`You are not currently standing in an active shop.`);\n            return;\n        }\n        const id = args[2];\n        switch (args[1]) {\n            case 'totem':\n                currentShop.stockroom.expectedTotemId = undefined;\n                client.shopmanager.echo(`Removed expected %lightgray%totem%end% from stockroom of shop '%lightgray%${currentShop.room.name}%end%'.`);\n                break;\n            case 'eye':\n            case 'eyesigil':\n            case 'eye sigil':\n                currentShop.stockroom.expectedEyeSigilId = undefined;\n                client.shopmanager.echo(`Removed expected %lightgray%eye sigil%end% from stockroom of shop '%lightgray%${currentShop.room.name}%end%'.`);\n                break;\n            case 'key':\n            case 'keysigil':\n            case 'key sigil':\n                currentShop.stockroom.expectedKeySigilId = undefined;\n                client.shopmanager.echo(`Removed expected %lightgray%key sigil%end% from stockroom of shop '%lightgray%${currentShop.room.name}%end%'.`);\n                break;\n            case 'mono':\n            case 'monolith':\n            case 'monolithsigil':\n            case 'monolith sigil':\n                currentShop.stockroom.expectedMonolithSigilId = undefined;\n                client.shopmanager.echo(`Removed expected %lightgray%monolith sigil%end% from stockroom of shop '%lightgray%${currentShop.room.name}%end%'.`);\n                break;\n            case 'orb':\n            case 'shimmeringorb':\n            case 'shimmering orb':\n                currentShop.stockroom.expectedShimmeringOrbId = undefined;\n                client.shopmanager.echo(`Removed expected %lightgray%shimmering orb%end% from stockroom of shop '%lightgray%${currentShop.room.name}%end%'.`);\n                break;\n            default:\n                const index = currentShop.stockroom.expectedItemIds.indexOf(id);\n                if (index === -1) {\n                    client.shopmanager.error(`Was not expecting item '%lightgray%${id}%end%' in stockroom of shop '%lightgray%${currentShop.room.name}%end%'.`);\n                    return;\n                }\n                currentShop.stockroom.expectedItemIds.splice(index, 1);\n                client.shopmanager.echo(`Removed expected item '%lightgray%${id}%end%' from stockroom of shop '%lightgray%${currentShop.room.name}%end%'.`);\n                break;\n        }\n        client.shopmanager.save();\n    })(args);"
                        }
                    ],
                    "name": "Shop Manager Stockroom Unexpect",
                    "enabled": true,
                    "id": 11,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:sm|shop\\-manager|shop manager) stockroom unexpect (totem|eye|eye ?sigil|key|key ?sigil|mono|monolith|monolith ?sigil|orb|shimmering ?orb|\\d+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        const currentShop = client.shopmanager.getCurrentShop();\n        if (!currentShop) {\n            client.shopmanager.error(`You are not currently standing in an active shop.`);\n            return;\n        }\n        const id = args[2];\n        switch (args[1]) {\n            case 'totem':\n                currentShop.storefront.expectedTotemId = id;\n                client.shopmanager.echo(`Set expected %lightgray%totem%end% in storefront of shop '%lightgray%${currentShop.room.name}%end%' to '%lightgray%${id}%end%'.`);\n                break;\n            case 'eye':\n            case 'eyesigil':\n            case 'eye sigil':\n                currentShop.storefront.expectedEyeSigilId = id;\n                client.shopmanager.echo(`Set expected %lightgray%eye sigil%end% in storefront of shop '%lightgray%${currentShop.room.name}%end%' to '%lightgray%${id}%end%'.`);\n                break;\n            case 'key':\n            case 'keysigil':\n            case 'key sigil':\n                currentShop.storefront.expectedKeySigilId = id;\n                client.shopmanager.echo(`Set expected %lightgray%key sigil%end% in storefront of shop '%lightgray%${currentShop.room.name}%end%' to '%lightgray%${id}%end%'.`);\n                break;\n            case 'mono':\n            case 'monolith':\n            case 'monolithsigil':\n            case 'monolith sigil':\n                currentShop.storefront.expectedMonolithSigilId = id;\n                client.shopmanager.echo(`Set expected %lightgray%monolith sigil%end% in storefront of shop '%lightgray%${currentShop.room.name}%end%' to '%lightgray%${id}%end%'.`);\n                break;\n            case undefined:\n                if (currentShop.storefront.expectedItemIds.includes(id)) {\n                    client.shopmanager.error(`Already expecting item '%lightgray%${id}%end%' in storefront of shop '%lightgray%${currentShop.room.name}%end%'.`);\n                    return;\n                }\n                currentShop.storefront.expectedItemIds.push(id);\n                client.shopmanager.echo(`Added expected item '%lightgray%totem%end%' in storefront of shop '%lightgray%${currentShop.room.name}%end%'.`);\n                break;\n            default:\n                client.shopmanager.error(`Invalid expected item '%lightgray%${args[1]}%end%'.`);\n                return;\n        }\n        client.shopmanager.save();\n    })(args);"
                        }
                    ],
                    "name": "Shop Manager Storefront Expect",
                    "enabled": true,
                    "id": 12,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:sm|shop\\-manager|shop manager) storefront expect(?: (totem|eye|eye ?sigil|key|key ?sigil|mono|monolith|monolith ?sigil))? (\\d+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        const currentShop = client.shopmanager.getCurrentShop();\n        if (!currentShop) {\n            client.shopmanager.error(`You are not currently standing in an active shop.`);\n            return;\n        }\n        const id = args[2];\n        switch (args[1]) {\n            case 'totem':\n                currentShop.storefront.expectedTotemId = undefined;\n                client.shopmanager.echo(`Removed expected %lightgray%totem%end% from storefront of shop '%lightgray%${currentShop.room.name}%end%'.`);\n                break;\n            case 'eye':\n            case 'eyesigil':\n            case 'eye sigil':\n                currentShop.storefront.expectedEyeSigilId = undefined;\n                client.shopmanager.echo(`Removed expected %lightgray%eye sigil%end% from storefront of shop '%lightgray%${currentShop.room.name}%end%'.`);\n                break;\n            case 'key':\n            case 'keysigil':\n            case 'key sigil':\n                currentShop.storefront.expectedKeySigilId = undefined;\n                client.shopmanager.echo(`Removed expected %lightgray%key sigil%end% from storefront of shop '%lightgray%${currentShop.room.name}%end%'.`);\n                break;\n            case 'mono':\n            case 'monolith':\n            case 'monolithsigil':\n            case 'monolith sigil':\n                currentShop.storefront.expectedMonolithSigilId = undefined;\n                client.shopmanager.echo(`Removed expected %lightgray%monolith sigil%end% from storefront of shop '%lightgray%${currentShop.room.name}%end%'.`);\n                break;\n            default:\n                const index = currentShop.storefront.expectedItemIds.indexOf(id);\n                if (index === -1) {\n                    client.shopmanager.error(`Was not expecting item '%lightgray%${id}%end%' in storefront of shop '%lightgray%${currentShop.room.name}%end%'.`);\n                    return;\n                }\n                currentShop.storefront.expectedItemIds.splice(index, 1);\n                client.shopmanager.echo(`Removed expected item '%lightgray%${id}%end%' from storefront of shop '%lightgray%${currentShop.room.name}%end%'.`);\n                break;\n        }\n        client.shopmanager.save();\n    })(args);"
                        }
                    ],
                    "name": "Shop Manager Storefront Unexpect",
                    "enabled": true,
                    "id": 13,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:sm|shop\\-manager|shop manager) storefront unexpect (totem|eye|eye ?sigil|key|key ?sigil|mono|monolith|monolith ?sigil|\\d+)$"
                },
                {
                    "type": "alias",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function () {\n        client.shopmanager.updateStockroom();\n    })(args);"
                        }
                    ],
                    "name": "Shop Manager Update Stockroom",
                    "enabled": true,
                    "id": 14,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "text": "^(?:sm|shop\\-manager|shop manager) update ?(?:stockroom)?$"
                }
            ],
            "actions": [],
            "name": "Aliases",
            "enabled": true,
            "id": 15
        },
        {
            "type": "group",
            "items": [
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        client.shopmanager.echo(JSON.stringify(args));\n    })(args);"
                        }
                    ],
                    "name": "Report Profits",
                    "enabled": true,
                    "id": 16,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^Profits for this period were tallied, with a result of (\\d+) gold sovereigns? deposited into the stockroom\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        client.shopmanager.echo(JSON.stringify(args));\n    })(args);"
                        }
                    ],
                    "name": "Report Purchase",
                    "enabled": true,
                    "id": 17,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^Someone purchased ([\\w\\W]+) \\((\\d+)\\) for (\\d+) gold\\.$"
                },
                {
                    "type": "trigger",
                    "items": [],
                    "actions": [
                        {
                            "action": "script",
                            "script": "(function (args) {\n        client.shopmanager.echo(JSON.stringify(args));\n    })(args);"
                        }
                    ],
                    "name": "Report Read",
                    "enabled": true,
                    "id": 18,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^Stockroom report, penned upon the (\\d+)(?:st|nd|rd|th) of (\\w+), (\\d+) AF:$"
                }
            ],
            "actions": [],
            "name": "Triggers",
            "enabled": true,
            "id": 19
        }
    ],
    "actions": [],
    "name": "Shop Manager",
    "enabled": true,
    "id": 1,
    "description": "A Shop Manager"
}